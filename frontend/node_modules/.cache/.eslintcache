[{"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\index.js":"1","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\reportWebVitals.js":"2","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\AppWrapper.js":"3","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\App.js":"4","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\components\\login.js":"5","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\routes\\index.js":"6","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\emp_sidebar.js":"7","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\components\\it-dept\\it-sidebar.js":"8","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\supervisor\\sup_sidebar.js":"9","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\Dashboard.js":"10","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\utilities\\constants.js":"11","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\tasks.js":"12","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\add_task.js":"13","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\view_task.js":"14","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\bonuses\\addbonus.js":"15","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\show_detail.js":"16","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\add_emp.js":"17","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\empList.js":"18","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\edit_emp.js":"19","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\bonuses\\bonuslist.js":"20","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\loggedTasks.js":"21","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\logs\\logistics.js":"22","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\logs\\add_logs.js":"23","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\logs\\edit_logs.js":"24","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\refinery\\refineList.js":"25","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\refinery\\addPurities.js":"26","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\refinery\\editPurities.js":"27","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\machine\\machineinfo.js":"28","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\attendance\\attendanceList.js":"29","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\attendance\\viewAttendance.js":"30","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\attendance\\attendanceDetails.js":"31"},{"size":665,"mtime":1673725754853,"results":"32","hashOfConfig":"33"},{"size":375,"mtime":1673725754854,"results":"34","hashOfConfig":"33"},{"size":535,"mtime":1673725754764,"results":"35","hashOfConfig":"33"},{"size":2038,"mtime":1673802332296,"results":"36","hashOfConfig":"33"},{"size":4257,"mtime":1673802332297,"results":"37","hashOfConfig":"33"},{"size":2533,"mtime":1673800209476,"results":"38","hashOfConfig":"33"},{"size":2964,"mtime":1673795167674,"results":"39","hashOfConfig":"33"},{"size":2430,"mtime":1673795332719,"results":"40","hashOfConfig":"33"},{"size":3139,"mtime":1673795634755,"results":"41","hashOfConfig":"33"},{"size":210,"mtime":1673786906755,"results":"42","hashOfConfig":"33"},{"size":1407,"mtime":1673799307835,"results":"43","hashOfConfig":"33"},{"size":4856,"mtime":1673798546675,"results":"44","hashOfConfig":"33"},{"size":9092,"mtime":1673766409159,"results":"45","hashOfConfig":"33"},{"size":2914,"mtime":1673798616435,"results":"46","hashOfConfig":"33"},{"size":6645,"mtime":1673766409152,"results":"47","hashOfConfig":"33"},{"size":4796,"mtime":1673797804103,"results":"48","hashOfConfig":"33"},{"size":12541,"mtime":1673766409154,"results":"49","hashOfConfig":"33"},{"size":4536,"mtime":1673798546672,"results":"50","hashOfConfig":"33"},{"size":12080,"mtime":1673779739637,"results":"51","hashOfConfig":"33"},{"size":5293,"mtime":1673802332298,"results":"52","hashOfConfig":"33"},{"size":3988,"mtime":1673798546674,"results":"53","hashOfConfig":"33"},{"size":4203,"mtime":1673798546673,"results":"54","hashOfConfig":"33"},{"size":7248,"mtime":1673766409157,"results":"55","hashOfConfig":"33"},{"size":3628,"mtime":1673766409157,"results":"56","hashOfConfig":"33"},{"size":7582,"mtime":1673798546673,"results":"57","hashOfConfig":"33"},{"size":10645,"mtime":1673786906766,"results":"58","hashOfConfig":"33"},{"size":11917,"mtime":1673795907122,"results":"59","hashOfConfig":"33"},{"size":5309,"mtime":1673791158365,"results":"60","hashOfConfig":"33"},{"size":3565,"mtime":1673805922511,"results":"61","hashOfConfig":"33"},{"size":4506,"mtime":1673799890869,"results":"62","hashOfConfig":"33"},{"size":4822,"mtime":1673800107952,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"c1pm5g",{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"67"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"67"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"67"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"137","usedDeprecatedRules":"67"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"67"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"67"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"67"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\index.js",[],[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\reportWebVitals.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\AppWrapper.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\App.js",["165","166","167","168","169","170","171","172"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\components\\login.js",["173","174","175","176","177"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\routes\\index.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\emp_sidebar.js",["178","179"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\components\\it-dept\\it-sidebar.js",["180","181","182","183","184"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\supervisor\\sup_sidebar.js",["185","186"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\Dashboard.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\utilities\\constants.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\tasks.js",["187","188","189","190","191","192"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\add_task.js",["193","194"],[],"\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { classNames } from 'primereact/utils';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport axios from 'axios';\r\nimport '../../css/style.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport constants from '../../utilities/constants';\r\nimport { Toast } from 'primereact/toast';\r\nconst constant = constants.getConstant();\r\nexport const AddLogs = (props) => {\r\n    // const [countries, setCountries] = useState([]);\r\n    const [showMessage, setShowMessage] = useState(false);\r\n\r\n    const [setShowData, setFormData] = useState({});\r\n    const [showLoading, setShowLoading] = useState(true);\r\n    const [selectedEmp, setSelectedEmp] = useState(null);\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const [data, setData] = useState(null);\r\n    const myToast = useRef(null);\r\n    const dt = useRef(null);\r\n    // const countryservice = new CountryService();\r\n    const defaultValues = {\r\n        name: '',\r\n        description: '',\r\n        // status: constant.Pen_status,\r\n        assign_date: '',\r\n        deadline: '',\r\n        emp_id: ''\r\n    }\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await axios(constant.empList);\r\n            setData(result.data.employees);\r\n            setShowLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const { control, formState: { errors }, handleSubmit, reset } = useForm({ defaultValues });\r\n\r\n    const onSubmit = (data) => {\r\n\r\n        if (validate(data)) {\r\n            data['emp_id'] = selectedEmp._id;\r\n            setFormData(data);\r\n            console.log(data);\r\n            axios.post(constant.taskList, data)\r\n                .then((result) => {\r\n                    setShowMessage(true)\r\n                }).catch((error) => setShowMessage(false));\r\n            reset();\r\n        }\r\n\r\n    };\r\n     let validate = (data) => {\r\n        let val = true;\r\n        if (data.deadline < data.assign_date) {\r\n            val = false;\r\n            exMessage('error', 'select valid date', 'validation exception');\r\n        }\r\n        if (selectedEmp === null) {\r\n            val = false;\r\n            exMessage('error', 'select employee to assign task', 'validation exception');\r\n        }\r\n\r\n        return val;\r\n    }\r\n    const TaskList = () => {\r\n        props.history.push({\r\n            pathname: '/tasks/',\r\n        });\r\n    }\r\n    const getFormErrorMessage = (name) => {\r\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\r\n    };\r\n    const exMessage = (severity, summary, detail) => {\r\n        return myToast.current.show({ severity: severity, summary: summary, detail: detail });\r\n    };\r\n\r\n\r\n\r\n    const dialogFooter = <div className=\"flex justify-content-center\">\r\n        <Button label=\"OK\" className=\"p-button-text\" autoFocus onClick={() => TaskList()} /></div>;\r\n\r\n    const header = (\r\n        <div className=\"table-header\">\r\n          \r\n            <span className=\"p-input-icon-left\">\r\n                <i className=\"pi pi-search\" />\r\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\"Search...\" />\r\n            </span>\r\n        </div>\r\n    );\r\n    return (\r\n\r\n        <div className=\"form-demo\">\r\n            <Toast ref={myToast}></Toast>\r\n\r\n            <Dialog visible={showMessage} onHide={() => setShowMessage(false)} position=\"top\" footer={dialogFooter} showHeader={false} breakpoints={{ '960px': '80vw' }} style={{ width: '30vw' }}>\r\n                <div className=\"flex justify-content-center flex-column pt-6 px-3\">\r\n                    <i className=\"pi pi-check-circle\" style={{ fontSize: '5rem', color: 'var(--green-500)' }} ></i>\r\n                    <h5>Submission Successful!</h5>\r\n                    <p style={{ lineHeight: 1.5, }}><b>Task is successfully added!</b></p>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <div className=\"justify-content-center\">\r\n               \r\n            <h2 className=\"text-center\"><b>Task Details Submission</b></h2>\r\n                <div className=\"card\" style={{ paddingBottom: '2rem', paddingTop: '2rem' }}>\r\n               \r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"grid p-fluid\">\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"name\" control={control} rules={{ required: 'Name is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.name} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"name\" className={classNames({ 'p-error': errors.name })}>Task Name*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('name')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"description\" control={control} rules={{ required: 'Description is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.description} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"description\" className={classNames({ 'p-error': errors.description })}>Task description*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('description')}\r\n                        </div><br></br>\r\n\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"assign_date\" control={control} rules={{ required: 'Date is required.' }} render={({ field, fieldState }) => (\r\n                                    <Calendar id={field.assign_date} value={field.value} onChange={(e) => field.onChange(e.value)} className={classNames({ 'p-invalid': fieldState.invalid })} dateFormat=\"dd/mm/yy\" mask=\"99/99/9999\" showIcon />\r\n                                )} />\r\n                                <label htmlFor=\"assign_date\" className={classNames({ 'p-error': errors.assign_date })}>Assigning Date</label>\r\n                            </span>\r\n                            {getFormErrorMessage('assign_date')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"deadline\" control={control} rules={{ required: 'Date is required.' }} render={({ field, fieldState }) => (\r\n                                    <Calendar id={field.deadline} value={field.value} onChange={(e) => field.onChange(e.value)} className={classNames({ 'p-invalid': fieldState.invalid })} dateFormat=\"dd/mm/yy\" mask=\"99/99/9999\" showIcon />\r\n                                )} />\r\n                                <label htmlFor=\"deadline\" className={classNames({ 'p-error': errors.deadline })}>Deadline Date</label>\r\n                            </span>\r\n                            {getFormErrorMessage('deadline')}\r\n                        </div><br></br>\r\n\r\n                        <div className='col-12'>\r\n                            <h5 className=\"text-center\"><b>Select employee to assign task</b></h5>\r\n                            <DataTable ref={dt} value={data} selectionMode=\"single\" selection={selectedEmp} onSelectionChange={e => setSelectedEmp(e.value)} dataKey=\"_id\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]}\r\n                    paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} products\"\r\n                    globalFilter={globalFilter} header={header} responsiveLayout=\"scroll\">\r\n                                <Column field=\"name\" header=\"Name\"></Column>\r\n                                <Column field=\"designation\" header=\"Designation\"></Column>\r\n                                <Column field=\"department\" header=\"Department\"></Column>\r\n\r\n                            </DataTable></div>\r\n                        <div className='col-12'>\r\n                            <Button type=\"submit\" label=\"Submit\" className=\"mt-2\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(AddLogs);","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\view_task.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\bonuses\\addbonus.js",["195","196","197"],[],"\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { classNames } from 'primereact/utils';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport axios from 'axios';\r\nimport '../../css/style.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport constants from '../../utilities/constants';\r\nimport { Toast } from 'primereact/toast';\r\nconst constant = constants.getConstant();\r\nexport const AddBonus = (props) => {\r\n    // const [countries, setCountries] = useState([]);\r\n    const [showMessage, setShowMessage] = useState(false);\r\n\r\n    const [setShowData, setFormData] = useState({});\r\n    const [showLoading, setShowLoading] = useState(true);\r\n    const [selectedEmp, setSelectedEmp] = useState(null);\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const [data, setData] = useState(null);\r\n    const myToast = useRef(null);\r\n    const dt = useRef(null);\r\n    // const countryservice = new CountryService();\r\n    const defaultValues = {\r\n        name: '',\r\n        amount: '',\r\n        emp_id: ''\r\n    }\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await axios(constant.empList);\r\n            setData(result.data.employees);\r\n            setShowLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const { control, formState: { errors }, handleSubmit, reset } = useForm({ defaultValues });\r\n\r\n    const onSubmit = (data) => {\r\n            data['emp_id'] = selectedEmp._id;\r\n            setFormData(data);\r\n            console.log(data);\r\n            axios.post(constant.bonusList, data)\r\n                .then((result) => {\r\n                    setShowMessage(true)\r\n                }).catch((error) => setShowMessage(false));\r\n            reset();\r\n    };\r\n     \r\n    const BonusList = () => {\r\n        props.history.push({\r\n            pathname: '/bonuslist/',\r\n        });\r\n    }\r\n    const getFormErrorMessage = (name) => {\r\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\r\n    };\r\n  \r\n\r\n    const dialogFooter = <div className=\"flex justify-content-center\">\r\n        <Button label=\"OK\" className=\"p-button-text\" autoFocus onClick={() => BonusList()} /></div>;\r\n\r\n    const header = (\r\n        <div className=\"table-header\">\r\n          \r\n            <span className=\"p-input-icon-left\">\r\n                <i className=\"pi pi-search\" />\r\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\"Search...\" />\r\n            </span>\r\n        </div>\r\n    );\r\n    return (\r\n\r\n        <div className=\"form-demo\">\r\n            <Toast ref={myToast}></Toast>\r\n\r\n            <Dialog visible={showMessage} onHide={() => setShowMessage(false)} position=\"top\" footer={dialogFooter} showHeader={false} breakpoints={{ '960px': '80vw' }} style={{ width: '30vw' }}>\r\n                <div className=\"flex justify-content-center flex-column pt-6 px-3\">\r\n                    <i className=\"pi pi-check-circle\" style={{ fontSize: '5rem', color: 'var(--green-500)' }} ></i>\r\n                    <h5>Submission Successful!</h5>\r\n                    <p style={{ lineHeight: 1.5, }}><b>Bonus Details successfully added!</b></p>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <div className=\"justify-content-center\">\r\n                <h2 className=\"text-center\"><b>Bonus Details Submission</b></h2>\r\n\r\n                <div className=\"card\" style={{ paddingBottom: '2rem', paddingTop: '2rem' }}>\r\n\r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"grid p-fluid\">\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"name\" control={control} rules={{ required: 'Name is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.name} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"name\" className={classNames({ 'p-error': errors.name })}>Bonus Title*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('name')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"amount\" control={control} rules={{ required: 'Amount is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.amount} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"amount\" className={classNames({ 'p-error': errors.amount })}>Bonus amount*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('amount')}\r\n                        </div>\r\n                        <div className='col-12'>\r\n                            <h3 className=\"text-center\"><b>Select employee to give bonus</b></h3>\r\n                            <DataTable ref={dt} value={data} selectionMode=\"single\" selection={selectedEmp} onSelectionChange={e => setSelectedEmp(e.value)} dataKey=\"_id\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]}\r\n                    paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} products\"\r\n                    globalFilter={globalFilter} header={header} responsiveLayout=\"scroll\">\r\n                                <Column field=\"name\" header=\"Name\"></Column>\r\n                                <Column field=\"designation\" header=\"Designation\"></Column>\r\n                                <Column field=\"department\" header=\"Department\"></Column>\r\n\r\n                            </DataTable></div>\r\n                        <div className='col-12'>\r\n                            <Button type=\"submit\" label=\"Submit\" className=\"mt-2\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(AddBonus);","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\show_detail.js",["198","199"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\add_emp.js",["200"],[],"\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { Divider } from 'primereact/divider';\r\nimport { classNames } from 'primereact/utils';\r\nimport { Password } from 'primereact/password';\r\nimport axios from 'axios';\r\nimport '../../css/style.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport constants from '../../utilities/constants';\r\nconst constant = constants.getConstant();\r\nexport const AddEmp = (props) => {\r\n    // const [countries, setCountries] = useState([]);\r\n    const [showMessage, setShowMessage] = useState(false);\r\n    const [setShowData,setFormData] = useState({});\r\n    // const countryservice = new CountryService();\r\n    const defaultValues = {\r\n        name: '',\r\n\tdesignation: '',\r\n\temail: '',\r\n    password:'',\r\n\tphone: '',\r\n\tsalary: '',\r\n\taddress: '',\r\n\tcnic: '',\r\n\tdate_of_birth: '',\r\n\tdepartment: '',\r\n\tgender: ''\r\n    }\r\n    const genders = [\r\n        {label: 'Male', value: 'male'},\r\n        {label: 'Female', value: 'female'}\r\n       \r\n    ];\r\n    useEffect(() => {\r\n        // countryservice.getCountries().then(data => setCountries(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const { control, formState: { errors }, handleSubmit, reset } = useForm({ defaultValues });\r\n\r\n    const onSubmit = (data) => {\r\n        setFormData(data);\r\n        \r\n        axios.post(constant.empAdd, data)\r\n          .then((result) => {\r\n            setShowMessage(true)\r\n          }).catch((error) => setShowMessage(false));\r\n        reset();\r\n    };\r\n\r\n    const EmployeeList = () => {\r\n        props.history.push({\r\n          pathname: '/empList/',\r\n        });\r\n      }\r\n    const getFormErrorMessage = (name) => {\r\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\r\n    };\r\n\r\n    const dialogFooter = <div className=\"flex justify-content-center\"><Button label=\"OK\" className=\"p-button-text\" autoFocus onClick={() => EmployeeList()} /></div>;\r\n    const passwordHeader = <h6>Pick a password</h6>;\r\n    const passwordFooter = (\r\n        <React.Fragment>\r\n            <Divider />\r\n            <p className=\"mt-2\">Suggestions</p>\r\n            <ul className=\"pl-2 ml-2 mt-0\" style={{ lineHeight: '1.5' }}>\r\n                <li>At least one lowercase</li>\r\n                <li>At least one uppercase</li>\r\n                <li>At least one numeric</li>\r\n                <li>Minimum 8 characters</li>\r\n            </ul>\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"form-demo\">\r\n            <Dialog visible={showMessage} onHide={() => setShowMessage(false)} position=\"top\" footer={dialogFooter} showHeader={false} breakpoints={{ '960px': '80vw' }} style={{ width: '30vw' }}>\r\n                <div className=\"flex justify-content-center flex-column pt-6 px-3\">\r\n                    <i className=\"pi pi-check-circle\" style={{ fontSize: '5rem', color: 'var(--green-500)' }} ></i>\r\n                    <h5>Registration Successful!</h5>\r\n                    <p style={{ lineHeight: 1.5, }}><b>Employee Details is successfully added!</b></p>\r\n                    \r\n                </div>\r\n            </Dialog>\r\n\r\n            <div className=\"justify-content-center \">\r\n            <h2 className=\"text-center\"><b>Register Employee</b></h2>\r\n                <div className=\"card\" style={{ paddingBottom: '2rem', paddingTop: '2rem' }}>\r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"grid p-fluid\">\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"name\" control={control} rules={{ required: 'Name is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.name} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"name\" className={classNames({ 'p-error': errors.name })}>Full Name*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('name')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"designation\" control={control} rules={{ required: 'Designation is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.designation} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"designation\" className={classNames({ 'p-error': errors.designation })}>Designation*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('designation')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label p-input-icon-right\">\r\n                                <i className=\"pi pi-envelope\" />\r\n                                <Controller name=\"email\" control={control}\r\n                                    rules={{ required: 'Email is required.', pattern: { value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i, message: 'Invalid email address. E.g. example@email.com' }}}\r\n                                    render={({ field, fieldState }) => (\r\n                                        <InputText id={field.name} {...field} className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"email\" className={classNames({ 'p-error': !!errors.email })}>Email*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('email')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"password\" control={control} rules={{ required: 'Password is required.' }} render={({ field, fieldState }) => (\r\n                                    <Password id={field.name} {...field} toggleMask className={classNames({ 'p-invalid': fieldState.invalid })} header={passwordHeader} footer={passwordFooter} />\r\n                                )} />\r\n                                <label htmlFor=\"password\" className={classNames({ 'p-error': errors.password })}>Password*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('password')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"phone\" control={control} rules={{ required: 'Phone is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.phone} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"phone\" className={classNames({ 'p-error': errors.phone })}>Phone*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('phone')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"salary\" control={control} rules={{ required: 'Salary is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.salary} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"salary\" className={classNames({ 'p-error': errors.salary })}>Salary*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('salary')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"address\" control={control} rules={{ required: 'address is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.address} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"address\" className={classNames({ 'p-error': errors.address })}>Address*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('address')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"cnic\" control={control} rules={{ required: 'Cnic is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.cnic} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"cnic\" className={classNames({ 'p-error': errors.cnic })}>Cnic*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('cnic')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"department\" control={control} rules={{ required: 'Department is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.department} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"department\" className={classNames({ 'p-error': errors.department })}>Department*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('department')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"gender\" control={control} rules={{ required: 'gender is required.' }} render={({ field }) => (\r\n                                   <Dropdown id={field.name}  value={field.value} options={genders} onChange={(e) => field.onChange(e.value)} placeholder=\"Select a Gender\"/>\r\n                                )} />\r\n                                <label htmlFor=\"gender\" className={classNames({ 'p-error': errors.gender })}>gender*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('gender')}\r\n                        </div><br></br>\r\n                     \r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"date_of_birth\" control={control} rules={{ required: 'Date is required.' }} render={({ field }) => (\r\n                                    <Calendar id={field.name} value={field.value} onChange={(e) => field.onChange(e.value)} dateFormat=\"dd/mm/yy\" mask=\"99/99/9999\" showIcon />\r\n                                )} />\r\n                                <label htmlFor=\"date_of_birth\" className={classNames({ 'p-error': errors.department })}>date of birth</label>\r\n                            </span>\r\n                            {getFormErrorMessage('date_of_birth')}\r\n                        </div><br></br>\r\n                        <div className=\"col-12\">\r\n                        <Button type=\"submit\" label=\"Submit\" className=\"mt-2\" />\r\n                     </div>\r\n                     \r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(AddEmp);            ","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\empList.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\edit_emp.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\bonuses\\bonuslist.js",["201","202","203","204"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\loggedTasks.js",["205","206","207","208","209","210","211"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\logs\\logistics.js",["212"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\logs\\add_logs.js",["213","214"],[],"\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { classNames } from 'primereact/utils';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport axios from 'axios';\r\nimport '../../css/style.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport constants from '../../utilities/constants';\r\nconst constant = constants.getConstant();\r\nexport const AddLogs = (props) => {\r\n    // const [countries, setCountries] = useState([]);\r\n    const [showMessage, setShowMessage] = useState(false);\r\n    const [setShowData, setFormData] = useState({});\r\n    // const countryservice = new CountryService();\r\n    const defaultValues = {\r\n        name: '',\r\n        amount: '',\r\n        delivery_date: '',\r\n        delivery_status: '',\r\n        location: ''\r\n    }\r\n\r\n    const delivery_status = [\r\n        {label: 'Pending', value: 'pending'},\r\n        {label: 'Delivered', value: 'delivered'}\r\n    ];\r\n\r\n    useEffect(() => {\r\n        // countryservice.getCountries().then(data => setCountries(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const { control, formState: { errors }, handleSubmit, reset } = useForm({ defaultValues });\r\n\r\n\r\n\r\n    const onSubmit = (data) => {\r\n        setFormData(data);\r\n\r\n        axios.post(constant.logList, data)\r\n            .then((result) => {\r\n                setShowMessage(true)\r\n            }).catch((error) => setShowMessage(false));\r\n        reset();\r\n    };\r\n\r\n    const LogisticsList = () => {\r\n        props.history.push({\r\n            pathname: '/logistics/',\r\n        });\r\n    }\r\n    const getFormErrorMessage = (name) => {\r\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\r\n    };\r\n\r\n    const dialogFooter = <div className=\"flex justify-content-center\">\r\n        <Button label=\"OK\" className=\"p-button-text\" autoFocus onClick={() => LogisticsList()} /></div>;\r\n    \r\n\r\n    return (\r\n        <div className=\"form-demo\">\r\n            <Dialog visible={showMessage} onHide={() => setShowMessage(false)} position=\"top\" footer={dialogFooter} showHeader={false} breakpoints={{ '960px': '80vw' }} style={{ width: '30vw' }}>\r\n                <div className=\"flex justify-content-center flex-column pt-6 px-3\">\r\n                    <i className=\"pi pi-check-circle\" style={{ fontSize: '5rem', color: 'var(--green-500)' }} ></i>\r\n                    <h5>Submission Successful!</h5>\r\n                    <p style={{ lineHeight: 1.5, }}><b> Logistics Details is successfully added!</b></p>\r\n                    \r\n                </div>\r\n            </Dialog>\r\n\r\n            <div className=\"justify-content-center\">\r\n            <h2 className=\"text-center\"><b>Logistics Details Submission</b></h2>\r\n                <div className=\"card\" style={{ paddingBottom: '2rem', paddingTop: '2rem' }}>      \r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"grid p-fluid\">\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"name\" control={control} rules={{ required: 'Name is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.name} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"name\" className={classNames({ 'p-error': errors.name })}>Vendor Name*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('name')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"amount\" control={control} rules={{ required: 'Amount is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.amount} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"amount\" className={classNames({ 'p-error': errors.amount })}>Amount*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('amount')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"delivery_date\" control={control} render={({ field }) => (\r\n                                    <Calendar id={field.delivery_date} value={field.value} onChange={(e) => field.onChange(e.value)} dateFormat=\"dd/mm/yy\" mask=\"99/99/9999\" showIcon />\r\n                                )} />\r\n                                <label htmlFor=\"delivery_date\">Delivery Date</label>\r\n                            </span>\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"delivery_status\" control={control} rules={{ required: 'Delivery Status is required.' }} render={({ field }) => (\r\n                                   <Dropdown id={field._id}  value={field.value} options={delivery_status} onChange={(e) => field.onChange(e.value)} placeholder=\"Select a Delivery Status\"/>\r\n                                )} />\r\n                                <label htmlFor=\"delivery_status\" className={classNames({ 'p-error': errors.delivery_status })}>Delivery Status*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('delivery_status')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-10\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"location\" control={control} rules={{ required: 'Location is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.location} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                    \r\n                                )} />\r\n                                <label htmlFor=\"location\" className={classNames({ 'p-error': errors.location })}>Location*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('location')}\r\n                        </div><a target={'_blank'} href='https://www.google.com/maps' style={{ fontSize:'20px',paddingTop:'1rem',color: \"blue\"}}><u>Go to map</u></a> <br></br>\r\n                        <div className=\"field col-12\">\r\n                        <Button type=\"submit\" label=\"Submit\" className=\"mt-2\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(AddLogs);","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\logs\\edit_logs.js",["215","216"],[],"\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { Button } from 'primereact/button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { classNames } from 'primereact/utils';\r\nimport axios from 'axios';\r\nimport '../../css/style.css';\r\nimport { withRouter,useLocation } from 'react-router-dom';\r\nimport constants from '../../utilities/constants';\r\n\r\nconst constant = constants.getConstant();\r\n\r\nexport const EditLogistics = (props) => {\r\n    const location = useLocation();\r\n    const [showMessage, setShowMessage] = useState(false);\r\n\r\n    let defaultValues = location.data.logs;\r\n\r\n    const delivery_status = [\r\n        {label: 'Pending', value: 'pending'},\r\n        {label: 'Delivered', value: 'delivered'}\r\n    ];\r\n\r\n    const onSubmit = (data) => {\r\n        axios.put(constant.logList+`?id=${data._id}`, data)\r\n          .then((result) => {\r\n            setShowMessage(true)\r\n          }).catch((error) => setShowMessage(false));\r\n        \r\n    };\r\n    const LogisticsList = () => {\r\n        props.history.push({\r\n          pathname: '/logistics/',\r\n        });\r\n      }\r\n\r\n\r\n      const { control, formState: { errors }, handleSubmit } = useForm({ defaultValues });\r\n    \r\n    const getFormErrorMessage = (name) => {\r\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\r\n    };\r\n\r\n    const dialogFooter = <div className=\"flex justify-content-center\"><Button label=\"OK\" className=\"p-button-text\" autoFocus onClick={() => LogisticsList()} /></div>;\r\n    \r\n\r\n    return (\r\n        <div className=\"form-demo\">\r\n            <Dialog visible={showMessage} onHide={() => setShowMessage(false)} position=\"top\" footer={dialogFooter} showHeader={false} breakpoints={{ '960px': '80vw' }} style={{ width: '30vw' }}>\r\n                <div className=\"flex justify-content-center flex-column pt-6 px-3\">\r\n                    <i className=\"pi pi-check-circle\" style={{ fontSize: '5rem', color: 'var(--green-500)' }}></i>\r\n                    <h5>Submission Successful!</h5>\r\n                    <p style={{ lineHeight: 1.5, textIndent: '1rem' }}>\r\n                       Your Delivery Status has been Updated successfully\r\n                    </p>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <div className=\"justify-content-center\">\r\n                <div className=\"card\" style={{ paddingBottom: '1rem', paddingTop: '0.5rem',paddingLeft:'1.5rem' }}>\r\n                  \r\n                    <h4 style={{ paddingBottom: '1rem', paddingTop: '1.5rem' }}><b>Update Delivery Status</b></h4>\r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"grid p-fluid\">\r\n                        <div className=\"field col-2\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"delivery_status\" control={control}  render={({ field }) => (\r\n                                   <Dropdown id={field._id}  value={field.value} options={delivery_status} onChange={(e) => field.onChange(e.value)} placeholder=\"Select a Delivery Status\"/>\r\n                                )} />\r\n                            </span>\r\n                            {getFormErrorMessage('delivery_status')}\r\n                        </div>\r\n                      <div className='col-2'>\r\n                     <Button type=\"submit\" label=\"Submit\" />\r\n                     </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default withRouter(EditLogistics);      ","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\refinery\\refineList.js",["217","218","219","220"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\refinery\\addPurities.js",["221","222","223","224","225","226","227","228","229","230","231","232","233"],[],"\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { classNames } from 'primereact/utils';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport axios from 'axios';\r\nimport '../../css/style.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport constants from '../../utilities/constants';\r\nimport { Toast } from 'primereact/toast';\r\nconst constant = constants.getConstant();\r\nexport const AddPurities = (props) => {\r\n    // const [countries, setCountries] = useState([]);\r\n    const [showMessage, setShowMessage] = useState(false);\r\n\r\n    const [setShowData, setFormData] = useState({});\r\n    const [showLoading, setShowLoading] = useState(true);\r\n    const [selectedEmp, setSelectedEmp] = useState(null);\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const [data, setData] = useState(null);\r\n    const myToast = useRef(null);\r\n    const dt = useRef(null);\r\n    // const countryservice = new CountryService();\r\n    const defaultValues = {\r\n        name: '',\r\n        amount: '',\r\n        beanSizeScore: '',\r\n        beanColorScore: '',\r\n        beanConsistencyScore: '',\r\n        beanFreshnessScore: '',\r\n        beanStiffIndexScore: '',\r\n        beanRipeIndexScore: '',\r\n        totalScore: '',\r\n        emp_id: '',\r\n        status: '',\r\n    }\r\n    let forID;\r\n    const loggedEmpData = JSON.parse(localStorage.getItem(\"data\"));\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await axios(constant.empList);\r\n            setData(result.data.employees);\r\n            setShowLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const { control, formState: { errors }, handleSubmit, reset } = useForm({ defaultValues });\r\n\r\n    const onSubmit = (data) => {\r\n\r\n        loggedEmpData.map((item)=>(forID=item._id))\r\n            data['emp_id'] =forID ;\r\n            setFormData(data);\r\n            console.log(data);\r\n            axios.post(constant.refineryList, data)\r\n                .then((result) => {\r\n                    setShowMessage(true)\r\n                }).catch((error) => setShowMessage(false));\r\n            reset();\r\n        \r\n\r\n    };\r\n   loggedEmpData.map((item)=>(forID=item._id))\r\n    const RefineList = () => {\r\n        props.history.push({\r\n            pathname: '/refineryList/',\r\n        });\r\n    }\r\n    const getFormErrorMessage = (name) => {\r\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\r\n    };\r\n  \r\n    const dialogFooter = <div className=\"flex justify-content-center\">\r\n        <Button label=\"OK\" className=\"p-button-text\" autoFocus onClick={() => RefineList()} /></div>;\r\n\r\n   \r\n    return (\r\n\r\n        <div className=\"form-demo\">\r\n\r\n            <Dialog visible={showMessage} onHide={() => setShowMessage(false)} position=\"top\" footer={dialogFooter} showHeader={false} breakpoints={{ '960px': '80vw' }} style={{ width: '30vw' }}>\r\n                <div className=\"flex justify-content-center flex-column pt-6 px-3\">\r\n                    <i className=\"pi pi-check-circle\" style={{ fontSize: '5rem', color: 'var(--green-500)' }} ></i>\r\n                    <h5>Submission Successful!</h5>\r\n                    <p style={{ lineHeight: 1.5, }}><b>Purity has been successfully added!</b></p>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <div className=\"justify-content-center\">\r\n               \r\n            <h2 className=\"text-center\"><b>Purity Details Submission</b></h2>\r\n                <div className=\"card\" style={{ paddingBottom: '2rem', paddingTop: '2rem' }}>\r\n               \r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"grid p-fluid\">\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"name\" control={control} rules={{ required: 'Name is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.name} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"name\" className={classNames({ 'p-error': errors.name })}>Purity Name*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('name')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"amount\" control={control} rules={{ required: 'Amount is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.amount} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"amount\" className={classNames({ 'p-error': errors.amount })}>Purity amount*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('amount')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"beanSizeScore\" control={control} rules={{ required: 'beanSizeScore is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.beanSizeScore} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"beanSizeScore\" className={classNames({ 'p-error': errors.beanSizeScore })}>Purity bean Size Score*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('beanSizeScore')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"beanColorScore\" control={control} rules={{ required: 'beanColorScore is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.beanColorScore} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"beanColorScore\" className={classNames({ 'p-error': errors.beanColorScore })}>Purity bean Color Score*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('beanColorScore')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"beanConsistencyScore\" control={control} rules={{ required: 'beanConsistencyScore is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.beanConsistencyScore} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"beanConsistencyScore\" className={classNames({ 'p-error': errors.beanConsistencyScore })}>Purity bean Consistency Score*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('beanConsistencyScore')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"beanFreshnessScore\" control={control} rules={{ required: 'beanFreshnessScore is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.beanFreshnessScore} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"beanFreshnessScore\" className={classNames({ 'p-error': errors.beanFreshnessScore })}>Purity bean Freshness Score*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('beanFreshnessScore')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"beanStiffIndexScore\" control={control} rules={{ required: 'beanStiffIndexScore is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.beanStiffIndexScore} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"beanStiffIndexScore\" className={classNames({ 'p-error': errors.beanStiffIndexScore })}>Purity bean Stiff Index Score*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('beanStiffIndexScore')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"beanRipeIndexScore\" control={control} rules={{ required: 'beanRipeIndexScore is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.beanRipeIndexScore} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"beanRipeIndexScore\" className={classNames({ 'p-error': errors.beanRipeIndexScore })}>Purity bean Ripe Index Score*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('beanRipeIndexScore')}\r\n                        </div><br></br>\r\n\r\n                        \r\n                        <div className='col-12'>\r\n                            <Button type=\"submit\" label=\"Submit\" className=\"mt-2\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(AddPurities);","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\refinery\\editPurities.js",["234","235","236","237","238","239","240","241","242","243","244","245","246"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\machine\\machineinfo.js",["247","248","249","250","251","252","253","254","255","256"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Button } from 'primereact/button';\r\nimport constants from '../../utilities/constants';\r\nimport { Card } from 'primereact/card';\r\nimport '../../css/style.css';\r\nimport Image1 from \"../assets/1.png\"\r\nimport Image2 from \"../assets/2.png\"\r\nimport Image3 from \"../assets/3.png\"\r\nimport Image4 from \"../assets/4.png\"\r\nimport Image5 from \"../assets/5.png\"\r\n\r\nconst constant = constants.getConstant();\r\n\r\nlet forID;\r\n\r\nfunction MachineInfo(props) {\r\n  const [data, setData] = useState([]);\r\n  const [showLoading, setShowLoading] = useState(true);\r\n  const [showMessage, setShowMessage] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(constant.machineList);\r\n      setData(result.data.machinesList);\r\n      setShowLoading(false);\r\n    };\r\n    const empData = JSON.parse(localStorage.getItem(\"data\"));\r\n    empData.map((item) => (forID = item._id));\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n  const machineImg = (name) => {\r\n    let img\r\n    if (name == \"grinder\") {\r\n      img = Image1\r\n    } else if (name == \"sorter\") {\r\n      img = Image2\r\n    } else if (name == \"refiner\") {\r\n      img = Image3\r\n    } else if (name == \"humidifier\") {\r\n      img = Image4\r\n    } else if (name == \"incubator\") {\r\n      img = Image5\r\n    }\r\n    return img\r\n  }\r\n\r\n\r\n  const onNeed = (id) => {\r\n   \r\n    axios.put(constant.machineNeed + `?id=${id}`)\r\n      .then((result) => {\r\n        setShowMessage(false);\r\n        axios.get(constant.machineList)\r\n          .then((result) => {\r\n            setData(result.data.machinesList);\r\n\r\n          }).catch((error) => setShowMessage(false));\r\n\r\n      }).catch((error) => setShowMessage(false));\r\n  }\r\n  const onUnder = (id) => {\r\n   \r\n    axios.put(constant.machineUnder + `?id=${id}`)\r\n      .then((result) => {\r\n        setShowMessage(false);\r\n        axios.get(constant.machineList)\r\n          .then((result) => {\r\n            setData(result.data.machinesList);\r\n\r\n          }).catch((error) => setShowMessage(false));\r\n\r\n      }).catch((error) => setShowMessage(false));\r\n  }\r\n\r\n  const onOper = (id) => {\r\n   \r\n    axios.put(constant.machineOper + `?id=${id}&emp_id=${forID}` )\r\n      .then((result) => {\r\n        setShowMessage(false);\r\n        axios.get(constant.machineList)\r\n          .then((result) => {\r\n            setData(result.data.machinesList);\r\n\r\n          }).catch((error) => setShowMessage(false));\r\n\r\n      }).catch((error) => setShowMessage(false));\r\n  }\r\n  return (\r\n\r\n    <div className=\"form-demo\">\r\n      <h2><b>Machine List</b></h2>\r\n      <br></br>\r\n      {showLoading && <Spinner animation=\"border\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </Spinner>}\r\n      \r\n          {data.map((item, i) => (\r\n            // <tr key={i}>\r\n            //   <th scope=\"row\" >{i + 1}</th>\r\n            //   <td style={{ fontSize:'20px'}}>{item.name}</td>\r\n            //   <td>\r\n            //   {(item.status == \"operational\" || item.status == \"under maintenance\") ? <Button style={{ marginLeft:'1rem'}} className=\"p-button-warning\" onClick={() => { onNeed(item._id) }}>Needs Maintenance</Button> : <span></span>}\r\n            //   {(item.status == \"operational\" || item.status == \"needs maintenance\") ? <Button style={{ marginLeft:'1rem'}} className=\"p-button-warning\" onClick={() => { onUnder(item._id) }}>Under Maintenance</Button> : <span></span>}\r\n            //   {(item.status == \"needs maintenance\" || item.status == \"under maintenance\") ? <Button style={{ marginLeft:'1rem'}} className=\"p-button-warning\" onClick={() => { onOper(item._id) }}>Operational</Button> : <span></span>}\r\n            //   </td>\r\n            // </tr>\r\n          \r\n            <Card header={<img alt=\"Card\" src={machineImg(item.name)}/>} style={{width: \"45%\", float: \"left\", marginLeft: \"2px\", marginRight: \"25px\", marginBottom: \"20px\"}}  title={item.name}>\r\n              <p style={{ fontSize:'18px'}}><b >Status</b></p>\r\n              <p style={ (item.status == \"operational\" ? {color: \"green\"} : (item.status == \"needs maintenance\") ? {color: \"orange\"} : {color: \"red\"})}><strong>{item.status}</strong></p>\r\n              <p style={{ fontSize:'18px'}}><b>Last Maintenance By</b></p>\r\n              <p>{item.machinedetails[0].name}</p>\r\n              <p style={{ fontSize:'18px'}}><b>Last Maintenance On</b></p>\r\n              <p>{item.maintenance_on.replace(/T.*/,'').split('-').reverse().join('-')}</p>\r\n              {\r\n                ((item.status == \"operational\") \r\n                ? <Button style={{ marginLeft:'4rem'}} className=\"p-button-warning\" onClick={() => { onNeed(item._id) }}>Mark for Maintenance</Button> \r\n                : (item.status == \"needs maintenance\") \r\n                ? <Button style={{ marginLeft:'3rem'}} className=\"p-button-danger\" onClick={() => { onUnder(item._id) }}>Mark as Under Maintenance</Button>\r\n                : <Button style={{ marginLeft:'4rem'}} className=\"p-button-success\" onClick={() => { onOper(item._id) }}>Mark as Operational</Button>)\r\n              }\r\n            </Card>\r\n          ))}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(MachineInfo);","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\attendance\\attendanceList.js",["257","258","259","260","261","262"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\attendance\\viewAttendance.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\attendance\\attendanceDetails.js",["263","264"],[],{"ruleId":"265","severity":1,"message":"266","line":23,"column":10,"nodeType":"267","messageId":"268","endLine":23,"endColumn":21},{"ruleId":"265","severity":1,"message":"269","line":23,"column":23,"nodeType":"267","messageId":"268","endLine":23,"endColumn":37},{"ruleId":"265","severity":1,"message":"270","line":36,"column":9,"nodeType":"267","messageId":"268","endLine":36,"endColumn":19},{"ruleId":"265","severity":1,"message":"271","line":40,"column":9,"nodeType":"267","messageId":"268","endLine":40,"endColumn":17},{"ruleId":"265","severity":1,"message":"272","line":45,"column":9,"nodeType":"267","messageId":"268","endLine":45,"endColumn":20},{"ruleId":"265","severity":1,"message":"273","line":48,"column":9,"nodeType":"267","messageId":"268","endLine":48,"endColumn":15},{"ruleId":"265","severity":1,"message":"274","line":51,"column":9,"nodeType":"267","messageId":"268","endLine":51,"endColumn":16},{"ruleId":"275","severity":1,"message":"276","line":67,"column":36,"nodeType":"277","messageId":"278","endLine":67,"endColumn":37},{"ruleId":"265","severity":1,"message":"279","line":1,"column":27,"nodeType":"267","messageId":"268","endLine":1,"endColumn":36},{"ruleId":"265","severity":1,"message":"280","line":13,"column":7,"nodeType":"267","messageId":"268","endLine":13,"endColumn":12},{"ruleId":"265","severity":1,"message":"281","line":41,"column":9,"nodeType":"267","messageId":"268","endLine":41,"endColumn":15},{"ruleId":"282","severity":1,"message":"283","line":44,"column":5,"nodeType":"284","messageId":"285","endLine":50,"endColumn":6},{"ruleId":"286","severity":1,"message":"287","line":45,"column":23,"nodeType":"288","messageId":"289","endLine":45,"endColumn":25},{"ruleId":"265","severity":1,"message":"290","line":2,"column":10,"nodeType":"267","messageId":"268","endLine":2,"endColumn":15},{"ruleId":"275","severity":1,"message":"276","line":77,"column":34,"nodeType":"277","messageId":"278","endLine":77,"endColumn":35},{"ruleId":"265","severity":1,"message":"291","line":2,"column":10,"nodeType":"267","messageId":"268","endLine":2,"endColumn":16},{"ruleId":"265","severity":1,"message":"290","line":2,"column":18,"nodeType":"267","messageId":"268","endLine":2,"endColumn":23},{"ruleId":"265","severity":1,"message":"292","line":2,"column":25,"nodeType":"267","messageId":"268","endLine":2,"endColumn":29},{"ruleId":"265","severity":1,"message":"293","line":5,"column":8,"nodeType":"267","messageId":"268","endLine":5,"endColumn":17},{"ruleId":"275","severity":1,"message":"276","line":65,"column":34,"nodeType":"277","messageId":"278","endLine":65,"endColumn":35},{"ruleId":"265","severity":1,"message":"290","line":2,"column":10,"nodeType":"267","messageId":"268","endLine":2,"endColumn":15},{"ruleId":"275","severity":1,"message":"276","line":80,"column":34,"nodeType":"277","messageId":"278","endLine":80,"endColumn":35},{"ruleId":"265","severity":1,"message":"294","line":5,"column":8,"nodeType":"267","messageId":"268","endLine":5,"endColumn":13},{"ruleId":"265","severity":1,"message":"295","line":8,"column":10,"nodeType":"267","messageId":"268","endLine":8,"endColumn":18},{"ruleId":"265","severity":1,"message":"296","line":14,"column":10,"nodeType":"267","messageId":"268","endLine":14,"endColumn":24},{"ruleId":"265","severity":1,"message":"297","line":14,"column":26,"nodeType":"267","messageId":"268","endLine":14,"endColumn":43},{"ruleId":"265","severity":1,"message":"298","line":20,"column":9,"nodeType":"267","messageId":"268","endLine":20,"endColumn":18},{"ruleId":"299","severity":1,"message":"300","line":136,"column":25,"nodeType":"301","messageId":"302","endLine":136,"endColumn":27},{"ruleId":"265","severity":1,"message":"303","line":21,"column":12,"nodeType":"267","messageId":"268","endLine":21,"endColumn":23},{"ruleId":"265","severity":1,"message":"266","line":22,"column":12,"nodeType":"267","messageId":"268","endLine":22,"endColumn":23},{"ruleId":"265","severity":1,"message":"304","line":6,"column":10,"nodeType":"267","messageId":"268","endLine":6,"endColumn":18},{"ruleId":"265","severity":1,"message":"303","line":21,"column":12,"nodeType":"267","messageId":"268","endLine":21,"endColumn":23},{"ruleId":"265","severity":1,"message":"266","line":22,"column":12,"nodeType":"267","messageId":"268","endLine":22,"endColumn":23},{"ruleId":"305","severity":1,"message":"306","line":53,"column":6,"nodeType":"307","endLine":53,"endColumn":8,"suggestions":"308"},{"ruleId":"275","severity":1,"message":"276","line":63,"column":30,"nodeType":"277","messageId":"278","endLine":63,"endColumn":31},{"ruleId":"265","severity":1,"message":"303","line":20,"column":12,"nodeType":"267","messageId":"268","endLine":20,"endColumn":23},{"ruleId":"265","severity":1,"message":"295","line":8,"column":10,"nodeType":"267","messageId":"268","endLine":8,"endColumn":18},{"ruleId":"265","severity":1,"message":"298","line":23,"column":9,"nodeType":"267","messageId":"268","endLine":23,"endColumn":18},{"ruleId":"275","severity":1,"message":"276","line":49,"column":27,"nodeType":"277","messageId":"278","endLine":49,"endColumn":28},{"ruleId":"305","severity":1,"message":"309","line":53,"column":6,"nodeType":"307","endLine":53,"endColumn":8,"suggestions":"310"},{"ruleId":"265","severity":1,"message":"311","line":1,"column":38,"nodeType":"267","messageId":"268","endLine":1,"endColumn":45},{"ruleId":"265","severity":1,"message":"294","line":5,"column":8,"nodeType":"267","messageId":"268","endLine":5,"endColumn":13},{"ruleId":"265","severity":1,"message":"295","line":8,"column":10,"nodeType":"267","messageId":"268","endLine":8,"endColumn":18},{"ruleId":"265","severity":1,"message":"296","line":17,"column":10,"nodeType":"267","messageId":"268","endLine":17,"endColumn":24},{"ruleId":"265","severity":1,"message":"297","line":17,"column":26,"nodeType":"267","messageId":"268","endLine":17,"endColumn":43},{"ruleId":"299","severity":1,"message":"312","line":26,"column":17,"nodeType":"301","messageId":"302","endLine":26,"endColumn":19},{"ruleId":"299","severity":1,"message":"300","line":113,"column":26,"nodeType":"301","messageId":"302","endLine":113,"endColumn":28},{"ruleId":"265","severity":1,"message":"313","line":8,"column":8,"nodeType":"267","messageId":"268","endLine":8,"endColumn":13},{"ruleId":"265","severity":1,"message":"303","line":18,"column":12,"nodeType":"267","messageId":"268","endLine":18,"endColumn":23},{"ruleId":"314","severity":1,"message":"315","line":123,"column":31,"nodeType":"316","messageId":"317","endLine":123,"endColumn":146,"fix":"318"},{"ruleId":"265","severity":1,"message":"279","line":2,"column":17,"nodeType":"267","messageId":"268","endLine":2,"endColumn":26},{"ruleId":"265","severity":1,"message":"319","line":7,"column":10,"nodeType":"267","messageId":"268","endLine":7,"endColumn":20},{"ruleId":"265","severity":1,"message":"294","line":5,"column":8,"nodeType":"267","messageId":"268","endLine":5,"endColumn":13},{"ruleId":"265","severity":1,"message":"296","line":17,"column":10,"nodeType":"267","messageId":"268","endLine":17,"endColumn":24},{"ruleId":"265","severity":1,"message":"297","line":17,"column":26,"nodeType":"267","messageId":"268","endLine":17,"endColumn":43},{"ruleId":"265","severity":1,"message":"320","line":43,"column":9,"nodeType":"267","messageId":"268","endLine":43,"endColumn":19},{"ruleId":"265","severity":1,"message":"304","line":6,"column":10,"nodeType":"267","messageId":"268","endLine":6,"endColumn":18},{"ruleId":"265","severity":1,"message":"321","line":9,"column":10,"nodeType":"267","messageId":"268","endLine":9,"endColumn":19},{"ruleId":"265","severity":1,"message":"322","line":10,"column":10,"nodeType":"267","messageId":"268","endLine":10,"endColumn":16},{"ruleId":"265","severity":1,"message":"323","line":15,"column":10,"nodeType":"267","messageId":"268","endLine":15,"endColumn":15},{"ruleId":"265","severity":1,"message":"303","line":21,"column":12,"nodeType":"267","messageId":"268","endLine":21,"endColumn":23},{"ruleId":"265","severity":1,"message":"266","line":22,"column":12,"nodeType":"267","messageId":"268","endLine":22,"endColumn":23},{"ruleId":"265","severity":1,"message":"324","line":23,"column":12,"nodeType":"267","messageId":"268","endLine":23,"endColumn":23},{"ruleId":"265","severity":1,"message":"325","line":23,"column":25,"nodeType":"267","messageId":"268","endLine":23,"endColumn":39},{"ruleId":"265","severity":1,"message":"326","line":24,"column":12,"nodeType":"267","messageId":"268","endLine":24,"endColumn":24},{"ruleId":"265","severity":1,"message":"327","line":24,"column":26,"nodeType":"267","messageId":"268","endLine":24,"endColumn":41},{"ruleId":"265","severity":1,"message":"328","line":25,"column":12,"nodeType":"267","messageId":"268","endLine":25,"endColumn":16},{"ruleId":"265","severity":1,"message":"329","line":26,"column":11,"nodeType":"267","messageId":"268","endLine":26,"endColumn":18},{"ruleId":"265","severity":1,"message":"330","line":27,"column":11,"nodeType":"267","messageId":"268","endLine":27,"endColumn":13},{"ruleId":"265","severity":1,"message":"304","line":6,"column":10,"nodeType":"267","messageId":"268","endLine":6,"endColumn":18},{"ruleId":"265","severity":1,"message":"321","line":9,"column":10,"nodeType":"267","messageId":"268","endLine":9,"endColumn":19},{"ruleId":"265","severity":1,"message":"322","line":10,"column":10,"nodeType":"267","messageId":"268","endLine":10,"endColumn":16},{"ruleId":"265","severity":1,"message":"323","line":15,"column":10,"nodeType":"267","messageId":"268","endLine":15,"endColumn":15},{"ruleId":"265","severity":1,"message":"303","line":24,"column":12,"nodeType":"267","messageId":"268","endLine":24,"endColumn":23},{"ruleId":"265","severity":1,"message":"266","line":25,"column":12,"nodeType":"267","messageId":"268","endLine":25,"endColumn":23},{"ruleId":"265","severity":1,"message":"324","line":26,"column":12,"nodeType":"267","messageId":"268","endLine":26,"endColumn":23},{"ruleId":"265","severity":1,"message":"325","line":26,"column":25,"nodeType":"267","messageId":"268","endLine":26,"endColumn":39},{"ruleId":"265","severity":1,"message":"326","line":27,"column":12,"nodeType":"267","messageId":"268","endLine":27,"endColumn":24},{"ruleId":"265","severity":1,"message":"327","line":27,"column":26,"nodeType":"267","messageId":"268","endLine":27,"endColumn":41},{"ruleId":"265","severity":1,"message":"328","line":28,"column":12,"nodeType":"267","messageId":"268","endLine":28,"endColumn":16},{"ruleId":"265","severity":1,"message":"329","line":29,"column":11,"nodeType":"267","messageId":"268","endLine":29,"endColumn":18},{"ruleId":"265","severity":1,"message":"330","line":30,"column":11,"nodeType":"267","messageId":"268","endLine":30,"endColumn":13},{"ruleId":"265","severity":1,"message":"331","line":22,"column":10,"nodeType":"267","messageId":"268","endLine":22,"endColumn":21},{"ruleId":"299","severity":1,"message":"300","line":40,"column":14,"nodeType":"301","messageId":"302","endLine":40,"endColumn":16},{"ruleId":"299","severity":1,"message":"300","line":42,"column":21,"nodeType":"301","messageId":"302","endLine":42,"endColumn":23},{"ruleId":"299","severity":1,"message":"300","line":44,"column":21,"nodeType":"301","messageId":"302","endLine":44,"endColumn":23},{"ruleId":"299","severity":1,"message":"300","line":46,"column":21,"nodeType":"301","messageId":"302","endLine":46,"endColumn":23},{"ruleId":"299","severity":1,"message":"300","line":48,"column":21,"nodeType":"301","messageId":"302","endLine":48,"endColumn":23},{"ruleId":"299","severity":1,"message":"300","line":117,"column":39,"nodeType":"301","messageId":"302","endLine":117,"endColumn":41},{"ruleId":"299","severity":1,"message":"300","line":117,"column":90,"nodeType":"301","messageId":"302","endLine":117,"endColumn":92},{"ruleId":"299","severity":1,"message":"300","line":123,"column":31,"nodeType":"301","messageId":"302","endLine":123,"endColumn":33},{"ruleId":"299","severity":1,"message":"300","line":125,"column":32,"nodeType":"301","messageId":"302","endLine":125,"endColumn":34},{"ruleId":"265","severity":1,"message":"295","line":8,"column":10,"nodeType":"267","messageId":"268","endLine":8,"endColumn":18},{"ruleId":"265","severity":1,"message":"332","line":9,"column":10,"nodeType":"267","messageId":"268","endLine":9,"endColumn":16},{"ruleId":"265","severity":1,"message":"333","line":18,"column":10,"nodeType":"267","messageId":"268","endLine":18,"endColumn":18},{"ruleId":"265","severity":1,"message":"334","line":18,"column":20,"nodeType":"267","messageId":"268","endLine":18,"endColumn":31},{"ruleId":"265","severity":1,"message":"331","line":20,"column":10,"nodeType":"267","messageId":"268","endLine":20,"endColumn":21},{"ruleId":"265","severity":1,"message":"335","line":20,"column":23,"nodeType":"267","messageId":"268","endLine":20,"endColumn":37},{"ruleId":"305","severity":1,"message":"306","line":53,"column":6,"nodeType":"307","endLine":53,"endColumn":8,"suggestions":"336"},{"ruleId":"275","severity":1,"message":"276","line":63,"column":30,"nodeType":"277","messageId":"278","endLine":63,"endColumn":31},"no-unused-vars","'showLoading' is assigned a value but never used.","Identifier","unusedVar","'setShowLoading' is assigned a value but never used.","'onEmployee' is assigned a value but never used.","'onLogOut' is assigned a value but never used.","'onLogistics' is assigned a value but never used.","'onTask' is assigned a value but never used.","'onBonus' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'useEffect' is defined but never used.","'datas' is assigned a value but never used.","'design' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Route' is defined but never used.","'Switch' is defined but never used.","'Link' is defined but never used.","'Dashboard' is defined but never used.","'Table' is defined but never used.","'parseISO' is defined but never used.","'panelCollapsed' is assigned a value but never used.","'setpanelCollapsed' is assigned a value but never used.","'fetchData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setShowData' is assigned a value but never used.","'Calendar' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.","ArrayExpression",["337"],"React Hook useEffect has a missing dependency: 'loggedEmpData'. Either include it or remove the dependency array.",["338"],"'useMemo' is defined but never used.","Expected '!==' and instead saw '!='.","'Image' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"339","text":"340"},"'classNames' is defined but never used.","'showDetail' is assigned a value but never used.","'DataTable' is defined but never used.","'Column' is defined but never used.","'Toast' is defined but never used.","'selectedEmp' is assigned a value but never used.","'setSelectedEmp' is assigned a value but never used.","'globalFilter' is assigned a value but never used.","'setGlobalFilter' is assigned a value but never used.","'data' is assigned a value but never used.","'myToast' is assigned a value but never used.","'dt' is assigned a value but never used.","'showMessage' is assigned a value but never used.","'Dialog' is defined but never used.","'deleteId' is assigned a value but never used.","'setDeleteId' is assigned a value but never used.","'setShowMessage' is assigned a value but never used.",["341"],{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},[6908,6908]," rel=\"noreferrer\"",{"desc":"342","fix":"346"},"Update the dependencies array to be: [options]",{"range":"347","text":"348"},"Update the dependencies array to be: [loggedEmpData]",{"range":"349","text":"350"},{"range":"351","text":"348"},[1240,1242],"[options]",[1641,1643],"[loggedEmpData]",[1253,1255]]