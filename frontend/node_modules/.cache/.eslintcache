[{"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\index.js":"1","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\AppWrapper.js":"2","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\reportWebVitals.js":"3","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\App.js":"4","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\components\\login.js":"5","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\routes\\index.js":"6","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\Dashboard.js":"7","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\components\\it-dept\\it-sidebar.js":"8","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\emp_sidebar.js":"9","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\supervisor\\sup_sidebar.js":"10","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\utilities\\constants.js":"11","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\add_task.js":"12","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\view_task.js":"13","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\tasks.js":"14","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\empList.js":"15","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\show_detail.js":"16","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\edit_emp.js":"17","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\add_emp.js":"18","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\loggedTasks.js":"19","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\logs\\logistics.js":"20","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\logs\\add_logs.js":"21","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\logs\\edit_logs.js":"22"},{"size":665,"mtime":1673725754853,"results":"23","hashOfConfig":"24"},{"size":535,"mtime":1673725754764,"results":"25","hashOfConfig":"24"},{"size":375,"mtime":1673725754854,"results":"26","hashOfConfig":"24"},{"size":1919,"mtime":1673730514826,"results":"27","hashOfConfig":"24"},{"size":4314,"mtime":1673725754814,"results":"28","hashOfConfig":"24"},{"size":1515,"mtime":1673726450936,"results":"29","hashOfConfig":"24"},{"size":210,"mtime":1673725754814,"results":"30","hashOfConfig":"24"},{"size":2295,"mtime":1673725754813,"results":"31","hashOfConfig":"24"},{"size":2527,"mtime":1673730285072,"results":"32","hashOfConfig":"24"},{"size":2706,"mtime":1673725754836,"results":"33","hashOfConfig":"24"},{"size":981,"mtime":1673726462744,"results":"34","hashOfConfig":"24"},{"size":8929,"mtime":1673725754837,"results":"35","hashOfConfig":"24"},{"size":992,"mtime":1673725754838,"results":"36","hashOfConfig":"24"},{"size":4682,"mtime":1673725754838,"results":"37","hashOfConfig":"24"},{"size":4325,"mtime":1673725754818,"results":"38","hashOfConfig":"24"},{"size":1906,"mtime":1673725754835,"results":"39","hashOfConfig":"24"},{"size":11946,"mtime":1673725754817,"results":"40","hashOfConfig":"24"},{"size":12345,"mtime":1673725754816,"results":"41","hashOfConfig":"24"},{"size":4121,"mtime":1673726810282,"results":"42","hashOfConfig":"24"},{"size":2730,"mtime":1673725754836,"results":"43","hashOfConfig":"24"},{"size":6962,"mtime":1673725754835,"results":"44","hashOfConfig":"24"},{"size":3619,"mtime":1673725754836,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"c1pm5g",{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"49"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"49"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"49"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"49"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"49"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"49"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"49"},"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\index.js",[],[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\AppWrapper.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\reportWebVitals.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\App.js",["124","125","126","127","128","129","130"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\components\\login.js",["131","132","133","134","135"],[],"import React, { useState, useEffect } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../style.css\";\r\nimport Image from \"./assets/login-img.jpg\";\r\nimport constants from './../utilities/constants';\r\nimport axios from \"axios\";\r\n\r\nconst constant = constants.getConstant();\r\n\r\n\r\nfunction Login(props) {\r\n  const [data, setData] = useState([]);\r\n  let datas = data.length;\r\n  var em;\r\n  var pass;\r\n\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     var em = document.getElementById(\"forEmail\").value;\r\n  //     var pass = document.getElementById(\"forPass\").value;\r\n  //     const result = await axios(constant.login + `?email=${em}&password=${pass}`);\r\n  //     setData(result.data.details);\r\n  //     //console.log(result)\r\n  //     setShowLoading(false);\r\n  //   };\r\n\r\n  //   fetchData();\r\n  // }, []);\r\n\r\n  const changed = async () => {\r\n    em = document.getElementById(\"forEmail\").value;\r\n    pass = document.getElementById(\"forPass\").value;\r\n    const result = await axios(constant.login + `?email=${em}&password=${pass}`);\r\n    setData(result.data.details);\r\n  }\r\n  \r\n\r\n  const onSubmit = async () => {\r\n    em = document.getElementById(\"forEmail\").value;\r\n    pass = document.getElementById(\"forPass\").value;\r\n    let design;\r\n    const result = await axios(constant.login + `?email=${em}&password=${pass}`);\r\n    setData(result.data.details);\r\n    {\r\n      data.map((item) => {\r\n        if (em === item.email) {\r\n          design = item.designation\r\n        }\r\n      })\r\n    }\r\n    localStorage.setItem('data', JSON.stringify(data));\r\n    (data.length > 0 ?\r\n        props.history.push({\r\n          pathname: 'App'\r\n        })\r\n      : alert(\"Account does not exist.\")\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <section className=\"vh-100\">\r\n        <div className=\"container-fluid bg-dark\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-6 text-black\">\r\n              <div className=\"px-5 ms-xl-4\">\r\n                <i\r\n                  className=\"fas fa-crow fa-2x me-3 pt-5 mt-xl-4\"\r\n                  style={{ color: \"#709085\" }}\r\n                />\r\n                <h1 style={{ color: \"#e6e6e6\", fontSize: \"70px\", marginBottom: \"0px\", marginTop: \"80px\" }}>\r\n                  MATRIX MS\r\n                </h1>\r\n              </div>\r\n              <div style={{ marginTop: \"50px\" }} className=\"d-flex align-items-center px-5 ms-xl-4 pt-xl-0\">\r\n                <form style={{ width: \"23rem\" }}>\r\n                  <div className=\"form-outline mb-4\">\r\n                    <input\r\n                      type=\"email\"\r\n                      id=\"forEmail\"\r\n                      placeholder=\"Email\"\r\n                      className=\"form-control form-control-lg\"\r\n                      onChange={changed}\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-outline mb-4\">\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"forPass\"\r\n                      placeholder=\"Password\"\r\n                      className=\"form-control form-control-lg\"\r\n                      onChange={changed}\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-grid gap-2\">\r\n                    <br />\r\n                    <button\r\n                      className=\"btn btn-outline-info btn-lg btn-block\"\r\n                      type=\"button\" onClick={() => { onSubmit() }}\r\n                    >\r\n                      Login\r\n                    </button>\r\n                  </div>\r\n                  <br />\r\n                  <label id=\"err\">aa</label>\r\n                  <br />{\" \"}\r\n                  <p className=\"small mb-5 pb-lg-2\">\r\n                    <a className=\"text-muted\" href=\"#!\">\r\n                      Forgot password?\r\n                    </a>\r\n                  </p>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-sm-6 px-0 d-none d-sm-block\">\r\n              <img\r\n                src={Image}\r\n                alt=\"\"\r\n                className=\"w-100 vh-100\"\r\n                style={{ objectFit: \"cover\", objectPosition: \"left\" }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\routes\\index.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\Dashboard.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\components\\it-dept\\it-sidebar.js",["136","137","138","139","140"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { Switch, Route, Link } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport './../../css/style.css';\r\nimport Dashboard from \"../../container/Dashboard\";\r\n\r\nlet empname;\r\n\r\n\r\n\r\nfunction ItSidebar() {\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const empdata = JSON.parse(localStorage.getItem('data'));\r\n    if (empdata) {\r\n      setData(empdata);\r\n    }\r\n  }, []);\r\n\r\n  const onEmployee = () => {\r\n    window.location = \"#/empList\";\r\n  };\r\n\r\n  const onLogistics = () => {\r\n    window.location = \"#/logistics\";\r\n  }\r\n\r\n  const onLogOut = () => {\r\n    localStorage.removeItem('data');\r\n    window.location = \"#/\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"App d-flex\">\r\n\r\n      <nav id=\"sidebar\">\r\n        <div className=\"p-4 pt-5 bg-dark\">\r\n          <h3 style={{ textAlign: 'center', color: \"white\" }}><strong>IT DEPARTMENT</strong></h3>\r\n          \r\n          <h5 style={{ textAlign: 'center', color: \"white\" }}>{empname}</h5>\r\n          <hr style={{ backgroundColor: \"white\" }} />\r\n          <ul className=\"nav nav-pills flex-column mb-auto\">\r\n\r\n            <button type=\"button\" className=\"btn btn-dark w-100\" onClick={() => { onEmployee() }}>Employee</button><br></br>\r\n            <button type=\"button\" className=\"btn btn-dark\" onClick={() => { onLogistics() }}>Logistics</button><br></br>\r\n            <button type=\"button\" className=\"btn btn-dark\">Machine Information</button><br></br>\r\n            <hr style={{ backgroundColor: \"white\" }} />\r\n            <button type=\"button\" className=\"btn btn-dark\">Attendance</button><br></br>\r\n            <button type=\"button\" className=\"btn btn-dark\">Salary</button><br></br>\r\n            <button type=\"button\" className=\"btn btn-dark\">Bonuses</button><br></br>\r\n\r\n          </ul>\r\n          {\r\n            data.map((item) => (\r\n              empname = item.name,\r\n              <span></span>\r\n            ))}\r\n          <hr style={{ backgroundColor: \"white\" }} />\r\n          <button type=\"button\" className=\"btn btn-outline-danger btn-block\" onClick={() => { onLogOut() }} >Sign out</button>\r\n\r\n\r\n          <div className=\"footer\">\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItSidebar;","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\emp_sidebar.js",["141","142"],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\supervisor\\sup_sidebar.js",["143","144"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Route } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport './../../css/style.css';\r\n\r\nlet empname;\r\n\r\nfunction SupSidebar(props) {\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const empdata = JSON.parse(localStorage.getItem('data'));\r\n    if (empdata) {\r\n      setData(empdata);\r\n    }\r\n  }, []);\r\n\r\n  const onDashboard = () => {\r\n    window.location = \"#/dashboard\";\r\n  };\r\n\r\n  const onLogistics = () => {\r\n    window.location = \"#/logistics\";\r\n  }\r\n  const onLogOut = () => {\r\n    localStorage.removeItem('data');\r\n    window.location = \"#/\";\r\n  }\r\n  const onTask = () => {\r\n    window.location = \"#/tasks\";\r\n  };\r\n  return (\r\n\r\n    <div className=\"d-flex\">\r\n      <nav id=\"sidebar\">\r\n        <div className=\"p-4 pt-5 bg-dark\">\r\n          \r\n          <h3 style={{ textAlign: 'center', color: \"white\" }}><strong>SUPERVISOR</strong></h3>\r\n          \r\n          <h5 style={{ textAlign: 'center', color: \"white\" }}>{empname}</h5><br />\r\n          \r\n          <hr style={{ backgroundColor: \"white\" }} />\r\n          <ul className=\"nav nav-pills flex-column mb-auto\">\r\n            <button type=\"button\" className=\"btn btn-dark w-100\" onClick={() => { onDashboard() }}>Dashboard</button><br></br>\r\n            <button type=\"button\" className=\"btn btn-dark\" onClick={() => { onTask() }}>Tasks</button><br></br>\r\n            <button type=\"button\" className=\"btn btn-dark\" onClick={() => { onLogistics() }}>Logistics</button><br></br>\r\n            <button type=\"button\" className=\"btn btn-dark\">Machine Information</button><br></br>\r\n            <button type=\"button\" className=\"btn btn-dark w-100\">Graphs</button><br></br>\r\n            {\r\n              \r\n            }\r\n            <button type=\"button\" className=\"btn btn-dark\">Refinery/Purity Status</button><br></br>\r\n            <hr style={{ backgroundColor: \"white\" }} />\r\n            <button type=\"button\" className=\"btn btn-dark\">Attendance</button><br></br>\r\n            <button type=\"button\" className=\"btn btn-dark\">Salary</button><br></br>\r\n            <button type=\"button\" className=\"btn btn-dark\">Bonuses</button><br></br>\r\n            \r\n          </ul>\r\n          <hr style={{ backgroundColor: \"white\" }} />\r\n            <button type=\"button\" className=\"btn btn-outline-danger btn-block\" onClick={() => { onLogOut() }} >Sign out</button><br/>\r\n          {\r\n            data.map((item) => (\r\n              empname = item.name,\r\n              <span></span>\r\n            ))}\r\n\r\n          \r\n\r\n\r\n          <div className=\"footer\">\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SupSidebar;","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\utilities\\constants.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\add_task.js",["145","146"],[],"\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { classNames } from 'primereact/utils';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport axios from 'axios';\r\nimport '../../css/style.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport constants from '../../utilities/constants';\r\nimport { Toast } from 'primereact/toast';\r\nconst constant = constants.getConstant();\r\nexport const AddLogs = (props) => {\r\n    // const [countries, setCountries] = useState([]);\r\n    const [showMessage, setShowMessage] = useState(false);\r\n\r\n    const [setShowData, setFormData] = useState({});\r\n    const [showLoading, setShowLoading] = useState(true);\r\n    const [selectedEmp, setSelectedEmp] = useState(null);\r\n\r\n    const [data, setData] = useState([]);\r\n    const myToast = useRef(null);\r\n    // const countryservice = new CountryService();\r\n    const defaultValues = {\r\n        name: '',\r\n        description: '',\r\n        // status: constant.Pen_status,\r\n        assign_date: '',\r\n        deadline: '',\r\n        emp_id: ''\r\n    }\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await axios(constant.empList);\r\n            setData(result.data.employees);\r\n            setShowLoading(false);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const { control, formState: { errors }, handleSubmit, reset } = useForm({ defaultValues });\r\n\r\n    const onSubmit = (data) => {\r\n\r\n        if (validate(data)) {\r\n            data['emp_id'] = selectedEmp._id;\r\n            setFormData(data);\r\n            console.log(data);\r\n            axios.post(constant.taskList, data)\r\n                .then((result) => {\r\n                    setShowMessage(true)\r\n                }).catch((error) => setShowMessage(false));\r\n            reset();\r\n        }\r\n\r\n    };\r\n     let validate = (data) => {\r\n        let val = true;\r\n        if (data.deadline < data.assign_date) {\r\n            val = false;\r\n            exMessage('error', 'select valid date', 'validation exception');\r\n        }\r\n        if (selectedEmp === null) {\r\n            val = false;\r\n            exMessage('error', 'select employee to assign task', 'validation exception');\r\n        }\r\n\r\n        return val;\r\n    }\r\n    const TaskList = () => {\r\n        props.history.push({\r\n            pathname: '/tasks/',\r\n        });\r\n    }\r\n    const getFormErrorMessage = (name) => {\r\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\r\n    };\r\n    const exMessage = (severity, summary, detail) => {\r\n        return myToast.current.show({ severity: severity, summary: summary, detail: detail });\r\n    };\r\n\r\n\r\n\r\n    const dialogFooter = <div className=\"flex justify-content-center\">\r\n        <Button label=\"OK\" className=\"p-button-text\" autoFocus onClick={() => TaskList()} /></div>;\r\n\r\n    const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\r\n    const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\r\n    return (\r\n\r\n        <div className=\"form-demo\">\r\n            <Toast ref={myToast}></Toast>\r\n\r\n            <Dialog visible={showMessage} onHide={() => setShowMessage(false)} position=\"top\" footer={dialogFooter} showHeader={false} breakpoints={{ '960px': '80vw' }} style={{ width: '30vw' }}>\r\n                <div className=\"flex justify-content-center flex-column pt-6 px-3\">\r\n                    <i className=\"pi pi-check-circle\" style={{ fontSize: '5rem', color: 'var(--green-500)' }} ></i>\r\n                    <h5>Submission Successful!</h5>\r\n                    <p style={{ lineHeight: 1.5, textIndent: '1rem' }}>\r\n                        Task Details successfully added!\r\n                    </p>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <div className=\"justify-content-center\">\r\n                <h5 className=\"text-center\">Task Details Submission</h5>\r\n\r\n                <div className=\"card\" style={{ paddingBottom: '2rem', paddingTop: '2rem' }}>\r\n\r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"grid p-fluid\">\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"name\" control={control} rules={{ required: 'Name is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.name} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"name\" className={classNames({ 'p-error': errors.name })}>Task Name*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('name')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"description\" control={control} rules={{ required: 'Description is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.description} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"description\" className={classNames({ 'p-error': errors.description })}>Task description*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('description')}\r\n                        </div><br></br>\r\n\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"assign_date\" control={control} rules={{ required: 'Date is required.' }} render={({ field, fieldState }) => (\r\n                                    <Calendar id={field.assign_date} value={field.value} onChange={(e) => field.onChange(e.value)} className={classNames({ 'p-invalid': fieldState.invalid })} dateFormat=\"dd/mm/yy\" mask=\"99/99/9999\" showIcon />\r\n                                )} />\r\n                                <label htmlFor=\"assign_date\" className={classNames({ 'p-error': errors.assign_date })}>Assigning Date</label>\r\n                            </span>\r\n                            {getFormErrorMessage('assign_date')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"deadline\" control={control} rules={{ required: 'Date is required.' }} render={({ field, fieldState }) => (\r\n                                    <Calendar id={field.deadline} value={field.value} onChange={(e) => field.onChange(e.value)} className={classNames({ 'p-invalid': fieldState.invalid })} dateFormat=\"dd/mm/yy\" mask=\"99/99/9999\" showIcon />\r\n                                )} />\r\n                                <label htmlFor=\"deadline\" className={classNames({ 'p-error': errors.deadline })}>Deadline Date</label>\r\n                            </span>\r\n                            {getFormErrorMessage('deadline')}\r\n                        </div><br></br>\r\n\r\n\r\n                        <div className='col-12'>\r\n                            <h5 className=\"text-center\">Select employee to assign task</h5>\r\n                            <DataTable value={data} selectionMode=\"single\" selection={selectedEmp} onSelectionChange={e => setSelectedEmp(e.value)} dataKey=\"_id\" paginator responsiveLayout=\"scroll\"\r\n                                paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n                                currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords}\" rows={10} rowsPerPageOptions={[10, 20, 50]}\r\n                                paginatorLeft={paginatorLeft} paginatorRight={paginatorRight}>\r\n                                <Column field=\"name\" header=\"Name\"></Column>\r\n                                <Column field=\"designation\" header=\"Designation\"></Column>\r\n                                <Column field=\"department\" header=\"Department\"></Column>\r\n\r\n                            </DataTable></div>\r\n                        <div className='col-12'>\r\n                            <Button type=\"submit\" label=\"Submit\" className=\"mt-2\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(AddLogs);","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\view_task.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\tasks.js",["147","148","149","150","151"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { Button } from 'primereact/button';\r\nimport constants from '../../utilities/constants';\r\nimport { parseISO } from \"date-fns\"\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { Panel } from 'primereact/panel';\r\nimport '../../css/style.css';\r\nconst constant = constants.getConstant();\r\nfunction TaskList(props) {\r\n  const [panelCollapsed, setpanelCollapsed] = useState([]);\r\n  const [data, setData] = useState([]);\r\n  const [selectedId, setSelectedId] = useState({});\r\n  const [showLoading, setShowLoading] = useState(true);\r\n  const [showMessage, setShowMessage] = useState(false);\r\n\r\n  const fetchData = e => {\r\n    const query = e.target.value\r\n    fetch(constant.taskList + `?name=${query}`)\r\n      .then(response => {\r\n        return response.json()\r\n      })\r\n      .then(data => {\r\n        setData(data.taskList)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(constant.taskList);\r\n      setData(result.data.taskList);\r\n      setShowLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const showDetail = (item) => {\r\n\r\n    let Task_View = {\r\n      taskview:  item,\r\n    }\r\n  \r\n    props.history.push({\r\n      pathname: '/view_task/',\r\n      task: Task_View\r\n    });\r\n  }\r\n\r\n  const AddTask = () => {\r\n    props.history.push({\r\n      pathname: '/add_task/',\r\n    });\r\n  }\r\n  const deleteData = () => {\r\n\r\n    let id = selectedId;\r\n    axios.delete(constant.taskList + `?id=${id}`)\r\n      .then((result) => {\r\n        setShowMessage(false);\r\n        axios.get(constant.taskList)\r\n          .then((result) => {\r\n            setData(result.data.taskList);\r\n\r\n          }).catch((error) => setShowMessage(false));\r\n\r\n      }).catch((error) => setShowMessage(false));\r\n\r\n  }\r\n\r\n\r\n  // const EditEmployee = (item) => {\r\n  //   item['date_of_birth'] = parseISO(item.date_of_birth);\r\n  //   let Employee_Edit = {\r\n\r\n  //     emp: Object.assign({}, item),\r\n\r\n  //   }\r\n  // }\r\n\r\n  const selectedItem = (id) => {\r\n    setSelectedId(id);\r\n    setShowMessage(true)\r\n  }\r\n  const onComplete = (id) => {\r\n   \r\n    axios.put(constant.taskList + `?id=${id}`)\r\n      .then((result) => {\r\n        setShowMessage(false);\r\n        axios.get(constant.taskList)\r\n          .then((result) => {\r\n            setData(result.data.taskList);\r\n\r\n          }).catch((error) => setShowMessage(false));\r\n\r\n      }).catch((error) => setShowMessage(false));\r\n  }\r\n  const dialogFooter = <div className=\"flex justify-content-center\">\r\n  <Button label=\"Yes\" className=\"p-button-danger\" autoFocus onClick={() => deleteData()} />\r\n  <Button label=\"No\" className=\"p-button-warning\" autoFocus onClick={() => setShowMessage(false)} />\r\n</div>;\r\n  return (\r\n\r\n    <div className=\"form-demo\">\r\n     <Dialog visible={showMessage} onHide={() => setShowMessage(false)} position=\"top\" footer={dialogFooter} showHeader={false} breakpoints={{ '960px': '80vw' }} style={{ width: '30vw' }}>\r\n        <div className=\"flex justify-content-center flex-column pt-6 px-3\">\r\n\r\n          <h5>Are you sure you want to Delete?</h5>\r\n          <p style={{ lineHeight: 1.5, textIndent: '1rem' }}>\r\n            Your Task is Updated successfully\r\n          </p>\r\n        </div>\r\n      </Dialog>\r\n      <h2>Task List</h2>\r\n      <div>\r\n        <input onChange={fetchData} label=\"Search User\" />\r\n      </div>\r\n      <div>\r\n        <br></br><p>\r\n          <Button onClick={() => { AddTask() }}>Add Task</Button>\r\n        </p>\r\n      </div>\r\n      {showLoading && <Spinner animation=\"border\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </Spinner>}\r\n      {data.map((item, i) => (\r\n        \r\n      <Panel header={item.name} toggleable>\r\n        <div>\r\n          <p style={ (item.status === \"pending\") ? {color: \"orange\"} : {color: \"green\"}}><strong>{item.status}</strong></p>\r\n          <p>{item.taskdetails[0].name}</p>\r\n          <p>{item.taskdetails[0].designation}</p>\r\n          <p>{item.taskdetails[0].department}</p>\r\n          <Button onClick={() => { showDetail(item) }} className=\"p-button-success\">View</Button>\r\n          {(item.status == \"pending\") ? <Button className=\"p-button-warning\" onClick={() => { onComplete(item._id) }}>Mark as Completed</Button> : <span></span>}\r\n          \r\n          <Button className=\"p-button-danger\" onClick={() => { selectedItem(item._id) }}>Delete</Button>\r\n          </div>\r\n      </Panel>\r\n      ))}\r\n \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(TaskList);","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\empList.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\show_detail.js",["152"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport { withRouter ,useLocation} from 'react-router-dom';\r\nimport constants from '../../utilities/constants';\r\n\r\n\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nconst constant = constants.getConstant();\r\nfunction Show(props) {\r\n  const [data, setData] = useState([]);\r\n  const [showLoading, setShowLoading] = useState(true);\r\n  \r\n  const location = useLocation();\r\n \r\n  const options = {\r\n    method: 'GET',\r\n    url: constant.empView,\r\n    params: {  id : location.id },\r\n    headers: {\r\n        'content-type': 'application/json',\r\n        'X-RapidAPI-Key': 'your-rapidapi-key',\r\n        'X-RapidAPI-Host': 'microsoft-translator-text.p.rapidapi.com',\r\n    },\r\n      \r\n};\r\n  useEffect(() => {\r\n   \r\n    const fetchData = async () => {\r\n      const result = await axios.request(options);\r\n      setData(result.data);\r\n      setShowLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n    \r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {showLoading && <Spinner animation=\"border\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </Spinner> }\r\n      <h2>Employee View</h2>\r\n      <Jumbotron>   \r\n  {data.map((item,i) => (\r\n <div key={i}>\r\n  <h4><b>Name</b><br/>{item.name} </h4>  \r\n  <h4><b>Designation</b><br/>{item.designation}</h4> \r\n  <h4><b>Email</b><br/>{item.email}</h4> \r\n  <h4><b>Phone</b><br/>{item.phone}</h4> \r\n  <h4><b>Salary</b><br/>{item.salary}</h4> \r\n  <h4><b>Address</b><br/>{item.address}</h4> \r\n  <h4><b>Cnic</b><br/>{item.cnic}</h4> \r\n  <h4><b>Date of birth</b><br/>{item.date_of_birth.replace(/T.*/,'').split('-').reverse().join('-')}</h4> \r\n  <h4><b>Department</b><br/>{item.department}</h4> \r\n  <h4><b>Gender</b><br/>{item.gender}</h4> \r\n   </div>  \r\n    ))}\r\n  </Jumbotron>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Show);","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\edit_emp.js",[],[],"D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\emp\\add_emp.js",["153"],[],"\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { Divider } from 'primereact/divider';\r\nimport { classNames } from 'primereact/utils';\r\nimport { Password } from 'primereact/password';\r\nimport axios from 'axios';\r\nimport '../../css/style.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport constants from '../../utilities/constants';\r\nconst constant = constants.getConstant();\r\nexport const AddEmp = (props) => {\r\n    // const [countries, setCountries] = useState([]);\r\n    const [showMessage, setShowMessage] = useState(false);\r\n    const [setShowData,setFormData] = useState({});\r\n    // const countryservice = new CountryService();\r\n    const defaultValues = {\r\n        name: '',\r\n\tdesignation: '',\r\n\temail: '',\r\n    password:'',\r\n\tphone: '',\r\n\tsalary: '',\r\n\taddress: '',\r\n\tcnic: '',\r\n\tdate_of_birth: '',\r\n\tdepartment: '',\r\n\tgender: ''\r\n    }\r\n    const genders = [\r\n        {label: 'Male', value: 'male'},\r\n        {label: 'Female', value: 'female'}\r\n       \r\n    ];\r\n    useEffect(() => {\r\n        // countryservice.getCountries().then(data => setCountries(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const { control, formState: { errors }, handleSubmit, reset } = useForm({ defaultValues });\r\n\r\n    const onSubmit = (data) => {\r\n        setFormData(data);\r\n        \r\n        axios.post(constant.empAdd, data)\r\n          .then((result) => {\r\n            setShowMessage(true)\r\n          }).catch((error) => setShowMessage(false));\r\n        reset();\r\n    };\r\n\r\n    const EmployeeList = () => {\r\n        props.history.push({\r\n          pathname: '/empList/',\r\n        });\r\n      }\r\n    const getFormErrorMessage = (name) => {\r\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\r\n    };\r\n\r\n    const dialogFooter = <div className=\"flex justify-content-center\"><Button label=\"OK\" className=\"p-button-text\" autoFocus onClick={() => EmployeeList()} /></div>;\r\n    const passwordHeader = <h6>Pick a password</h6>;\r\n    const passwordFooter = (\r\n        <React.Fragment>\r\n            <Divider />\r\n            <p className=\"mt-2\">Suggestions</p>\r\n            <ul className=\"pl-2 ml-2 mt-0\" style={{ lineHeight: '1.5' }}>\r\n                <li>At least one lowercase</li>\r\n                <li>At least one uppercase</li>\r\n                <li>At least one numeric</li>\r\n                <li>Minimum 8 characters</li>\r\n            </ul>\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"form-demo\">\r\n            <Dialog visible={showMessage} onHide={() => setShowMessage(false)} position=\"top\" footer={dialogFooter} showHeader={false} breakpoints={{ '960px': '80vw' }} style={{ width: '30vw' }}>\r\n                <div className=\"flex justify-content-center flex-column pt-6 px-3\">\r\n                    <i className=\"pi pi-check-circle\" style={{ fontSize: '5rem', color: 'var(--green-500)' }} ></i>\r\n                    <h5>Registration Successful!</h5>\r\n                    <p style={{ lineHeight: 1.5, textIndent: '1rem' }}>\r\n                       Your Employee is Added successfully\r\n                    </p>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <div className=\"justify-content-center \">\r\n                <div className=\"card\">\r\n                    <h5 className=\"text-center\">Register</h5>\r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"grid p-fluid\">\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"name\" control={control} rules={{ required: 'Name is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.name} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"name\" className={classNames({ 'p-error': errors.name })}>Full Name*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('name')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"designation\" control={control} rules={{ required: 'Designation is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.designation} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"designation\" className={classNames({ 'p-error': errors.designation })}>Designation*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('designation')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label p-input-icon-right\">\r\n                                <i className=\"pi pi-envelope\" />\r\n                                <Controller name=\"email\" control={control}\r\n                                    rules={{ required: 'Email is required.', pattern: { value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i, message: 'Invalid email address. E.g. example@email.com' }}}\r\n                                    render={({ field, fieldState }) => (\r\n                                        <InputText id={field.name} {...field} className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"email\" className={classNames({ 'p-error': !!errors.email })}>Email*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('email')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"password\" control={control} rules={{ required: 'Password is required.' }} render={({ field, fieldState }) => (\r\n                                    <Password id={field.name} {...field} toggleMask className={classNames({ 'p-invalid': fieldState.invalid })} header={passwordHeader} footer={passwordFooter} />\r\n                                )} />\r\n                                <label htmlFor=\"password\" className={classNames({ 'p-error': errors.password })}>Password*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('password')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"phone\" control={control} rules={{ required: 'Phone is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.phone} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"phone\" className={classNames({ 'p-error': errors.phone })}>Phone*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('phone')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"salary\" control={control} rules={{ required: 'Salary is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.salary} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"salary\" className={classNames({ 'p-error': errors.salary })}>Salary*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('salary')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"address\" control={control} rules={{ required: 'address is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.address} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"address\" className={classNames({ 'p-error': errors.address })}>Address*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('address')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"cnic\" control={control} rules={{ required: 'Cnic is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.cnic} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"cnic\" className={classNames({ 'p-error': errors.cnic })}>Cnic*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('cnic')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"department\" control={control} rules={{ required: 'Department is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.department} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"department\" className={classNames({ 'p-error': errors.department })}>Department*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('department')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"gender\" control={control} rules={{ required: 'gender is required.' }} render={({ field }) => (\r\n                                   <Dropdown id={field.name}  value={field.value} options={genders} onChange={(e) => field.onChange(e.value)} placeholder=\"Select a Gender\"/>\r\n                                )} />\r\n                                <label htmlFor=\"gender\" className={classNames({ 'p-error': errors.gender })}>gender*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('gender')}\r\n                        </div><br></br>\r\n                     \r\n                        <div className=\"field col-4\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"date_of_birth\" control={control} render={({ field }) => (\r\n                                    <Calendar id={field.name} value={field.value} onChange={(e) => field.onChange(e.value)} dateFormat=\"dd/mm/yy\" mask=\"99/99/9999\" showIcon />\r\n                                )} />\r\n                                <label htmlFor=\"date_of_birth\">date of birth</label>\r\n                            </span>\r\n                        </div><br></br>\r\n                        <div className=\"col-12\">\r\n                        <Button type=\"submit\" label=\"Submit\" className=\"mt-2\" />\r\n                     </div>\r\n                     \r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(AddEmp);            ","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\task\\loggedTasks.js",["154","155","156","157","158","159","160"],[],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport axios from \"axios\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { Button } from \"primereact/button\";\r\nimport constants from \"../../utilities/constants\";\r\nimport { parseISO } from \"date-fns\";\r\nimport { Dialog } from \"primereact/dialog\";\r\nimport { Panel } from \"primereact/panel\";\r\nimport \"../../css/style.css\";\r\nconst constant = constants.getConstant();\r\n\r\nlet forID;\r\n\r\nfunction LoggedTaskList(props) {\r\n  const [panelCollapsed, setpanelCollapsed] = useState([]);\r\n  const [data, setData] = useState([]);\r\n  const [showLoading, setShowLoading] = useState(true);\r\n  const [showMessage, setShowMessage] = useState(false);\r\n\r\n  const fetchData = (e) => {\r\n    const query = e.target.value;\r\n    fetch(constant.taskList + `?name=${query}`)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setData(data.taskList);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (forID != undefined) {\r\n        const result = await axios(constant.loggedTasks + `?id=${forID}`);\r\n        setData(result.data.taskList);\r\n      }\r\n      setShowLoading(false);\r\n    }\r\n    const loggedData = JSON.parse(localStorage.getItem(\"data\"));\r\n    loggedData.map((item) => (forID = item._id));\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const showDetail = (item) => {\r\n    let Task_View = {\r\n      taskview: item,\r\n    };\r\n\r\n    props.history.push({\r\n      pathname: \"/view_task/\",\r\n      task: Task_View,\r\n    });\r\n  };\r\n \r\n  const onComplete = (id) => {\r\n    axios\r\n      .put(constant.taskList + `?id=${id}`)\r\n      .then((result) => {\r\n        setShowMessage(false);\r\n        axios\r\n          .get(constant.taskList)\r\n          .then((result) => {\r\n            setData(result.data.taskList);\r\n          })\r\n          .catch((error) => setShowMessage(false));\r\n      })\r\n      .catch((error) => setShowMessage(false));\r\n  };\r\n  return (\r\n    <div className=\"form-demo\">\r\n      <Dialog\r\n        visible={showMessage}\r\n        onHide={() => setShowMessage(false)}\r\n        position=\"top\"\r\n        showHeader={false}\r\n        breakpoints={{ \"960px\": \"80vw\" }}\r\n        style={{ width: \"30vw\" }}\r\n      >\r\n        <div className=\"flex justify-content-center flex-column pt-6 px-3\">\r\n          <h5>Are you sure you want to Delete?</h5>\r\n          <p style={{ lineHeight: 1.5, textIndent: \"1rem\" }}>\r\n            Your Task is Updated successfully\r\n          </p>\r\n        </div>\r\n      </Dialog>\r\n      <h2>Task List</h2>\r\n      <div>\r\n        <input onChange={fetchData} label=\"Search User\" />\r\n      </div>\r\n      <div>\r\n        <br></br>\r\n      </div>\r\n      {showLoading && (\r\n        <Spinner animation=\"border\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n      )}\r\n      {data.map((item, i) => (\r\n        <Panel header={item.name} toggleable>\r\n          <div>\r\n            <p\r\n              style={\r\n                item.status === \"pending\"\r\n                  ? { color: \"orange\" }\r\n                  : { color: \"green\" }\r\n              }\r\n            >\r\n              <strong>{item.status}</strong>\r\n            </p>\r\n            <p>{item.taskdetails[0].name}</p>\r\n            <p>{item.taskdetails[0].designation}</p>\r\n            <p>{item.taskdetails[0].department}</p>\r\n            <Button\r\n              onClick={() => {\r\n                showDetail(item);\r\n              }}\r\n              className=\"p-button-success\"\r\n            >\r\n              View\r\n            </Button>\r\n            {item.status == \"pending\" ? (\r\n              <Button\r\n                className=\"p-button-warning\"\r\n                onClick={() => {\r\n                  onComplete(item._id);\r\n                }}\r\n              >\r\n                Mark as Completed\r\n              </Button>\r\n            ) : (\r\n              <span></span>\r\n            )}\r\n          </div>\r\n        </Panel>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(LoggedTaskList);\r\n","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\logs\\logistics.js",["161"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\nimport constants from '../../utilities/constants';\r\nimport Image from \"../assets/mapsicon.png\";\r\n\r\nconst constant = constants.getConstant();\r\n\r\n\r\nfunction LogList(props) {\r\n\r\n  const [data, setData] = useState([]);\r\n  const [showLoading, setShowLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(constant.logList);\r\n      setData(result.data.logistics);\r\n      setShowLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const AddLogistics = () => {\r\n    props.history.push({\r\n      pathname: '/add_logs/',\r\n    });\r\n  }\r\n\r\n  const EditLogs = (item) => {\r\n    let Logs_Edit = {\r\n\r\n      logs: Object.assign({}, item),\r\n\r\n    }\r\n\r\n    props.history.push({\r\n      pathname: '/edit_logs/',\r\n      data: Logs_Edit\r\n    });\r\n  }\r\n\r\n  return (\r\n\r\n    <div>\r\n      <h2>Logistics Data List</h2>\r\n      <div>\r\n        <br></br><p>\r\n        <Button onClick={() => { AddLogistics() }}>Add Logistics</Button>\r\n        </p>\r\n      </div>\r\n      {showLoading && <Spinner animation=\"border\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </Spinner>}\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Vendor Name</th>\r\n            <th scope=\"col\">Amount</th>\r\n            <th scope=\"col\">Delivery Date</th>\r\n            <th scope=\"col\">Location</th>\r\n            <th scope=\"col\">Delivery Status</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map((item, i) => (\r\n              <tr style={ item.delivery_status === \"pending\" ? {backgroundColor: \"#FFCCCB\"} : {backgroundColor: \"#90EE90\"}} key={i}> \r\n                <th scope=\"row\" >{i + 1}</th>\r\n                <td>{item.name}</td>\r\n                <td>{item.amount}</td>\r\n                <td>{item.delivery_date.replace(/T.*/,'').split('-').reverse().join('-')}</td>\r\n                <td style={{maxWidth: '50px'}}>\r\n                  <a style={{color: \"blue\"}} target='_blank' rel='noreferrer' href={item.location}>\r\n                    <u>go to maps</u>\r\n                  </a>\r\n                </td>\r\n                <td >{item.delivery_status} \r\n                <Button style={{float: 'right'}} className=\"p-button-warning\" onClick={() => { EditLogs(item) }}>Edit</Button></td>\r\n              </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(LogList);","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\logs\\add_logs.js",["162"],[],"\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { classNames } from 'primereact/utils';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport axios from 'axios';\r\nimport '../../css/style.css';\r\nimport { withRouter } from 'react-router-dom';\r\nimport constants from '../../utilities/constants';\r\nconst constant = constants.getConstant();\r\nexport const AddLogs = (props) => {\r\n    // const [countries, setCountries] = useState([]);\r\n    const [showMessage, setShowMessage] = useState(false);\r\n    const [setShowData, setFormData] = useState({});\r\n    // const countryservice = new CountryService();\r\n    const defaultValues = {\r\n        name: '',\r\n        amount: '',\r\n        delivery_date: '',\r\n        delivery_status: '',\r\n        location: ''\r\n    }\r\n\r\n    const delivery_status = [\r\n        {label: 'Pending', value: 'pending'},\r\n        {label: 'Delivered', value: 'delivered'}\r\n    ];\r\n\r\n    useEffect(() => {\r\n        // countryservice.getCountries().then(data => setCountries(data));\r\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const { control, formState: { errors }, handleSubmit, reset } = useForm({ defaultValues });\r\n\r\n\r\n\r\n    const onSubmit = (data) => {\r\n        setFormData(data);\r\n\r\n        axios.post(constant.logList, data)\r\n            .then((result) => {\r\n                setShowMessage(true)\r\n            }).catch((error) => setShowMessage(false));\r\n        reset();\r\n    };\r\n\r\n    const LogisticsList = () => {\r\n        props.history.push({\r\n            pathname: '/logistics/',\r\n        });\r\n    }\r\n    const getFormErrorMessage = (name) => {\r\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\r\n    };\r\n\r\n    const dialogFooter = <div className=\"flex justify-content-center\">\r\n        <Button label=\"OK\" className=\"p-button-text\" autoFocus onClick={() => LogisticsList()} /></div>;\r\n    \r\n\r\n    return (\r\n        <div className=\"form-demo\">\r\n            <Dialog visible={showMessage} onHide={() => setShowMessage(false)} position=\"top\" footer={dialogFooter} showHeader={false} breakpoints={{ '960px': '80vw' }} style={{ width: '30vw' }}>\r\n                <div className=\"flex justify-content-center flex-column pt-6 px-3\">\r\n                    <i className=\"pi pi-check-circle\" style={{ fontSize: '5rem', color: 'var(--green-500)' }} ></i>\r\n                    <h5>Submission Successful!</h5>\r\n                    <p style={{ lineHeight: 1.5, textIndent: '1rem' }}>\r\n                        Logistics Details successfully added!\r\n                    </p>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <div className=\"justify-content-center\">\r\n                <div className=\"card\">\r\n                    <h5 className=\"text-center\">Logistics Details Submission</h5>\r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"grid p-fluid\">\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"name\" control={control} rules={{ required: 'Name is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.name} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"name\" className={classNames({ 'p-error': errors.name })}>Vendor Name*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('name')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"amount\" control={control} rules={{ required: 'Amount is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.amount} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"amount\" className={classNames({ 'p-error': errors.amount })}>Amount*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('amount')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"delivery_date\" control={control} render={({ field }) => (\r\n                                    <Calendar id={field.delivery_date} value={field.value} onChange={(e) => field.onChange(e.value)} dateFormat=\"dd/mm/yy\" mask=\"99/99/9999\" showIcon />\r\n                                )} />\r\n                                <label htmlFor=\"delivery_date\">Delivery Date</label>\r\n                            </span>\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"delivery_status\" control={control} rules={{ required: 'Delivery Status is required.' }} render={({ field }) => (\r\n                                   <Dropdown id={field._id}  value={field.value} options={delivery_status} onChange={(e) => field.onChange(e.value)} placeholder=\"Select a Delivery Status\"/>\r\n                                )} />\r\n                                <label htmlFor=\"delivery_status\" className={classNames({ 'p-error': errors.delivery_status })}>Delivery Status*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('delivery_status')}\r\n                        </div><br></br>\r\n                        <div className=\"field col-6\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"location\" control={control} rules={{ required: 'Location is required.' }} render={({ field, fieldState }) => (\r\n                                    <InputText id={field.location} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"location\" className={classNames({ 'p-error': errors.location })}>Location*</label>\r\n                            </span>\r\n                            {getFormErrorMessage('location')}\r\n                        </div><br></br>\r\n\r\n                        <Button type=\"submit\" label=\"Submit\" className=\"mt-2\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(AddLogs);","D:\\University\\5th Semester\\Software Construction Lab\\project\\Matrix-MERN-App\\frontend\\src\\container\\logs\\edit_logs.js",["163","164"],[],"\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { Button } from 'primereact/button';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { classNames } from 'primereact/utils';\r\nimport axios from 'axios';\r\nimport '../../css/style.css';\r\nimport { withRouter,useLocation } from 'react-router-dom';\r\nimport constants from '../../utilities/constants';\r\n\r\nconst constant = constants.getConstant();\r\n\r\nexport const EditLogistics = (props) => {\r\n    const location = useLocation();\r\n    const [showMessage, setShowMessage] = useState(false);\r\n\r\n    let defaultValues = location.data.logs;\r\n\r\n    const delivery_status = [\r\n        {label: 'Pending', value: 'pending'},\r\n        {label: 'Delivered', value: 'delivered'}\r\n    ];\r\n\r\n    const onSubmit = (data) => {\r\n        axios.put(constant.logList+`?id=${data._id}`, data)\r\n          .then((result) => {\r\n            setShowMessage(true)\r\n          }).catch((error) => setShowMessage(false));\r\n        \r\n    };\r\n    const LogisticsList = () => {\r\n        props.history.push({\r\n          pathname: '/logistics/',\r\n        });\r\n      }\r\n\r\n\r\n      const { control, formState: { errors }, handleSubmit } = useForm({ defaultValues });\r\n    \r\n    const getFormErrorMessage = (name) => {\r\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\r\n    };\r\n\r\n    const dialogFooter = <div className=\"flex justify-content-center\"><Button label=\"OK\" className=\"p-button-text\" autoFocus onClick={() => LogisticsList()} /></div>;\r\n    \r\n\r\n    return (\r\n        <div className=\"form-demo\">\r\n            <Dialog visible={showMessage} onHide={() => setShowMessage(false)} position=\"top\" footer={dialogFooter} showHeader={false} breakpoints={{ '960px': '80vw' }} style={{ width: '30vw' }}>\r\n                <div className=\"flex justify-content-center flex-column pt-6 px-3\">\r\n                    <i className=\"pi pi-check-circle\" style={{ fontSize: '5rem', color: 'var(--green-500)' }}></i>\r\n                    <h5>Submission Successful!</h5>\r\n                    <p style={{ lineHeight: 1.5, textIndent: '1rem' }}>\r\n                       Your Delivery Status has been Updated successfully\r\n                    </p>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <div className=\"justify-content-center\">\r\n                <div className=\"card\" style={{ paddingBottom: '1rem', paddingTop: '0.5rem',paddingLeft:'1rem' }}>\r\n                  \r\n                    <h5 style={{ paddingBottom: '1rem', paddingTop: '1.5rem' }}>Update Delivery Status</h5>\r\n                    <form onSubmit={handleSubmit(onSubmit)} className=\"grid p-fluid\">\r\n                        <div className=\"field col-2\">\r\n                            <span className=\"p-float-label\">\r\n                                <Controller name=\"delivery_status\" control={control}  render={({ field }) => (\r\n                                   <Dropdown id={field._id}  value={field.value} options={delivery_status} onChange={(e) => field.onChange(e.value)} placeholder=\"Select a Delivery Status\"/>\r\n                                )} />\r\n                            </span>\r\n                            {getFormErrorMessage('delivery_status')}\r\n                        </div>\r\n                      <div className='col-2'>\r\n                     <Button type=\"submit\" label=\"Submit\" />\r\n                     </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default withRouter(EditLogistics);      ",{"ruleId":"165","severity":1,"message":"166","line":22,"column":10,"nodeType":"167","messageId":"168","endLine":22,"endColumn":21},{"ruleId":"165","severity":1,"message":"169","line":22,"column":23,"nodeType":"167","messageId":"168","endLine":22,"endColumn":37},{"ruleId":"165","severity":1,"message":"170","line":32,"column":9,"nodeType":"167","messageId":"168","endLine":32,"endColumn":19},{"ruleId":"165","severity":1,"message":"171","line":36,"column":9,"nodeType":"167","messageId":"168","endLine":36,"endColumn":17},{"ruleId":"165","severity":1,"message":"172","line":41,"column":9,"nodeType":"167","messageId":"168","endLine":41,"endColumn":20},{"ruleId":"165","severity":1,"message":"173","line":44,"column":9,"nodeType":"167","messageId":"168","endLine":44,"endColumn":15},{"ruleId":"174","severity":1,"message":"175","line":60,"column":36,"nodeType":"176","messageId":"177","endLine":60,"endColumn":37},{"ruleId":"165","severity":1,"message":"178","line":1,"column":27,"nodeType":"167","messageId":"168","endLine":1,"endColumn":36},{"ruleId":"165","severity":1,"message":"179","line":13,"column":7,"nodeType":"167","messageId":"168","endLine":13,"endColumn":12},{"ruleId":"165","severity":1,"message":"180","line":41,"column":9,"nodeType":"167","messageId":"168","endLine":41,"endColumn":15},{"ruleId":"181","severity":1,"message":"182","line":44,"column":5,"nodeType":"183","messageId":"184","endLine":50,"endColumn":6},{"ruleId":"185","severity":1,"message":"186","line":45,"column":23,"nodeType":"187","messageId":"188","endLine":45,"endColumn":25},{"ruleId":"165","severity":1,"message":"189","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":16},{"ruleId":"165","severity":1,"message":"190","line":2,"column":18,"nodeType":"167","messageId":"168","endLine":2,"endColumn":23},{"ruleId":"165","severity":1,"message":"191","line":2,"column":25,"nodeType":"167","messageId":"168","endLine":2,"endColumn":29},{"ruleId":"165","severity":1,"message":"192","line":5,"column":8,"nodeType":"167","messageId":"168","endLine":5,"endColumn":17},{"ruleId":"174","severity":1,"message":"175","line":57,"column":34,"nodeType":"176","messageId":"177","endLine":57,"endColumn":35},{"ruleId":"165","severity":1,"message":"190","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":15},{"ruleId":"174","severity":1,"message":"175","line":61,"column":34,"nodeType":"176","messageId":"177","endLine":61,"endColumn":35},{"ruleId":"165","severity":1,"message":"190","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":15},{"ruleId":"174","severity":1,"message":"175","line":65,"column":34,"nodeType":"176","messageId":"177","endLine":65,"endColumn":35},{"ruleId":"165","severity":1,"message":"193","line":21,"column":12,"nodeType":"167","messageId":"168","endLine":21,"endColumn":23},{"ruleId":"165","severity":1,"message":"166","line":22,"column":12,"nodeType":"167","messageId":"168","endLine":22,"endColumn":23},{"ruleId":"165","severity":1,"message":"194","line":5,"column":8,"nodeType":"167","messageId":"168","endLine":5,"endColumn":13},{"ruleId":"165","severity":1,"message":"195","line":8,"column":10,"nodeType":"167","messageId":"168","endLine":8,"endColumn":18},{"ruleId":"165","severity":1,"message":"196","line":14,"column":10,"nodeType":"167","messageId":"168","endLine":14,"endColumn":24},{"ruleId":"165","severity":1,"message":"197","line":14,"column":26,"nodeType":"167","messageId":"168","endLine":14,"endColumn":43},{"ruleId":"198","severity":1,"message":"199","line":138,"column":25,"nodeType":"200","messageId":"201","endLine":138,"endColumn":27},{"ruleId":"202","severity":1,"message":"203","line":38,"column":6,"nodeType":"204","endLine":38,"endColumn":8,"suggestions":"205"},{"ruleId":"165","severity":1,"message":"193","line":20,"column":12,"nodeType":"167","messageId":"168","endLine":20,"endColumn":23},{"ruleId":"165","severity":1,"message":"206","line":1,"column":38,"nodeType":"167","messageId":"168","endLine":1,"endColumn":45},{"ruleId":"165","severity":1,"message":"194","line":5,"column":8,"nodeType":"167","messageId":"168","endLine":5,"endColumn":13},{"ruleId":"165","severity":1,"message":"195","line":8,"column":10,"nodeType":"167","messageId":"168","endLine":8,"endColumn":18},{"ruleId":"165","severity":1,"message":"196","line":17,"column":10,"nodeType":"167","messageId":"168","endLine":17,"endColumn":24},{"ruleId":"165","severity":1,"message":"197","line":17,"column":26,"nodeType":"167","messageId":"168","endLine":17,"endColumn":43},{"ruleId":"198","severity":1,"message":"207","line":35,"column":17,"nodeType":"200","messageId":"201","endLine":35,"endColumn":19},{"ruleId":"198","severity":1,"message":"199","line":124,"column":26,"nodeType":"200","messageId":"201","endLine":124,"endColumn":28},{"ruleId":"165","severity":1,"message":"208","line":8,"column":8,"nodeType":"167","messageId":"168","endLine":8,"endColumn":13},{"ruleId":"165","severity":1,"message":"193","line":18,"column":12,"nodeType":"167","messageId":"168","endLine":18,"endColumn":23},{"ruleId":"165","severity":1,"message":"178","line":2,"column":17,"nodeType":"167","messageId":"168","endLine":2,"endColumn":26},{"ruleId":"165","severity":1,"message":"209","line":7,"column":10,"nodeType":"167","messageId":"168","endLine":7,"endColumn":20},"no-unused-vars","'showLoading' is assigned a value but never used.","Identifier","unusedVar","'setShowLoading' is assigned a value but never used.","'onEmployee' is assigned a value but never used.","'onLogOut' is assigned a value but never used.","'onLogistics' is assigned a value but never used.","'onTask' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'useEffect' is defined but never used.","'datas' is assigned a value but never used.","'design' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'Dashboard' is defined but never used.","'setShowData' is assigned a value but never used.","'Table' is defined but never used.","'parseISO' is defined but never used.","'panelCollapsed' is assigned a value but never used.","'setpanelCollapsed' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.","ArrayExpression",["210"],"'useMemo' is defined but never used.","Expected '!==' and instead saw '!='.","'Image' is defined but never used.","'classNames' is defined but never used.",{"desc":"211","fix":"212"},"Update the dependencies array to be: [options]",{"range":"213","text":"214"},[1025,1027],"[options]"]